return(E1)
}
place.bets <- function(B, E1) {
E1$bet <- B * E1$a_
t = sum(E1$a)
E1$bet.bsf <- 50 * E1$a / t
profit = rep(NA, nrow(E1))
for (s in 1:nrow(E1)) {
profit[s] = ifelse(E1[s,]$teamWon == 1, E1[s,]$bet * (E1[s,]$alpha - 1),  -E1[s,]$bet)
}
E1$profit <- profit
E1 <- E1 %>% mutate(neg.EV.Bet =  (bet != 0 & !plusEV))
return(E1)
}
##############
### RUNNIT ###
##############
B = 50
E1 <- dataset.transform(D0)
E2 <- permute.indices(E1)
E3 <- add.col.b(E2)
E4 <- add.col.a(E3)
E5 <- place.bets.BSF(B, E4)
E6 <- E5 %>% filter(bet > 0) %>% arrange(-bet)
#View(E6)
E7 <- E6 %>% select(team, opp, ml, bet)
E7 %>% gt() %>%
data_color(
columns = bet,
colors = scales::col_numeric(
palette = paletteer::paletteer_d(
palette = "ggsci::blue_material"
) %>% as.character(),
domain = NULL
)
)
## EV cutoff
F1 <- E6 %>% mutate(EV = p-implied.p)
F2 <- F1 %>% filter(EV >= .0999) %>% mutate(bet = EV * 25/sum(EV))
F3 <- F2 %>% select(team, opp, ml, bet)
F3 %>% gt() %>%
data_color(
columns = bet,
colors = scales::col_numeric(
palette = paletteer::paletteer_d(
palette = "ggsci::blue_material"
) %>% as.character(),
domain = NULL
)
)
}
F3
E7
E7 %>% gt()
library(gt)
install.packages("gt")
library(gt)
library(paletteer)
install.packages("paletteer")
library(paletteer)
options(scipen = 50)
{
theme_reach <- function() {
theme_fivethirtyeight() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, hjust = 0.5, face = "bold"),
plot.subtitle = element_text(size = 13, hjust = 0.5),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.text = element_text(size = 12)
)
}
#####################
### READ DATA ###
#####################
{
D <- read_csv("week2_data.csv")
moneyline.to.alpha <- function(ml) {
if (ml < 0) {
return( 100/(-ml) + 1)
} else {
return( ml/100 + 1)
}
}
moneyline.to.implied.prob <- function(ml) {
if (ml < 0) {
return( (-ml)/(-ml + 100) )
} else {
return( 100/(ml + 100) )
}
}
D0 <- D #%>% mutate(TeamF.Win.Prob.538 = TeamF.Win.Prob.538*100)
#D0 <- D %>% filter(Round == "Week 1") %>% filter(!is.na(ScoreF))
}
########################
### HELPER FUNCTIONS ###
########################
dataset.transform <- function(D1) {
E1 <- tibble(team = character(), opp = character(), p = double(), alpha = double(),
ml = double(), implied.p = double(), plusEV = numeric())
for (r in 1:nrow(D1)) {
f = D1[r,]
u = D1[r,]
teamF = f$TeamF
teamU = u$TeamU
pF = f$TeamF.Win.Prob.538
pU = 1 - pF
alphaF =  moneyline.to.alpha(f$F.Moneyline.Odds)
alphaU =  moneyline.to.alpha(u$U.Moneyline.Odds)
mlF =  f$F.Moneyline.Odds
mlU =  u$U.Moneyline.Odds
implied.p.F =  moneyline.to.implied.prob(f$F.Moneyline.Odds)
implied.p.U =  moneyline.to.implied.prob(u$U.Moneyline.Odds)
plusEV.F = (pF > implied.p.F)
plusEV.U = (pU > implied.p.U)
E1 <- E1 %>% add_row(team = teamF, opp = teamU, p = pF, alpha = alphaF,
ml=mlF, implied.p = implied.p.F, plusEV = plusEV.F)
E1 <- E1 %>% add_row(team = teamU, opp = teamF, p = pU, alpha = alphaU,
ml=mlU, implied.p = implied.p.U, plusEV = plusEV.U)
}
return(E1)
}
permute.indices <- function(E1) {
E1 = E1 %>% mutate(p.times.alpha = rep(0,nrow(E1)))
for (i in 1:(nrow(E1)/2)) {
A = E1[(2*i-1):(2*i),]
A <- A %>% mutate(p.times.alpha = p*alpha) %>% arrange(desc(p.times.alpha))
E1[(2*i-1):(2*i),] = A
}
return(E1)
}
add.col.b <- function(E1) {
E1 = E1 %>% mutate(F_0 = rep(0,nrow(E1)), F_1 = rep(0,nrow(E1)),
t = rep(0,nrow(E1)), b = rep(0,nrow(E1)))
for (i in 1:(nrow(E1)/2)) {
A = E1[(2*i-1):(2*i),]
team1 = A[1,]
team2 = A[2,]
F_0 = 1
p_1 = team1$p
alpha_1 = team1$alpha
sig_1 = 1/alpha_1
F_1 = (1-p_1)/(1-sig_1)
F_ = c(F_0,F_1)
b = min(F_)
t = which.min(F_)-1
A$F_0 = c(F_0, NA)
A$F_1 = c(F_1, NA)
A$t = c(t, NA)
A$b = c(b, 1)
E1[(2*i-1):(2*i),] = A
}
return(E1)
}
add.col.a <- function(E1) {
E1 = E1 %>% mutate(a = rep(0,nrow(E1)), a_ = rep(0,nrow(E1))) %>% select (!c(F_0,F_1,t))
for (i in 1:(nrow(E1)/2)) {
A = E1[(2*i-1):(2*i),]
a.f = max(A$p[1] - A$b[1]/A$alpha[1], 0)
A$a = c(a.f, 0)
E1[(2*i-1):(2*i),] = A
}
# number of games that a > 0
N = sum(E1$a > 0)
E1$a_ = E1$a/N
return(E1)
}
place.bets.BSF <- function(B, E1) {
# B == 50
E1$bet <- round(B * E1$a / sum(E1$a), 2)
return(E1)
}
place.bets <- function(B, E1) {
E1$bet <- B * E1$a_
t = sum(E1$a)
E1$bet.bsf <- 50 * E1$a / t
profit = rep(NA, nrow(E1))
for (s in 1:nrow(E1)) {
profit[s] = ifelse(E1[s,]$teamWon == 1, E1[s,]$bet * (E1[s,]$alpha - 1),  -E1[s,]$bet)
}
E1$profit <- profit
E1 <- E1 %>% mutate(neg.EV.Bet =  (bet != 0 & !plusEV))
return(E1)
}
##############
### RUNNIT ###
##############
B = 50
E1 <- dataset.transform(D0)
E2 <- permute.indices(E1)
E3 <- add.col.b(E2)
E4 <- add.col.a(E3)
E5 <- place.bets.BSF(B, E4)
E6 <- E5 %>% filter(bet > 0) %>% arrange(-bet)
#View(E6)
E7 <- E6 %>% select(team, opp, ml, bet)
E7 %>% gt() %>%
data_color(
columns = bet,
colors = scales::col_numeric(
palette = paletteer::paletteer_d(
palette = "ggsci::blue_material"
) %>% as.character(),
domain = NULL
)
)
## EV cutoff
F1 <- E6 %>% mutate(EV = p-implied.p)
F2 <- F1 %>% filter(EV >= .0999) %>% mutate(bet = EV * 25/sum(EV))
F3 <- F2 %>% select(team, opp, ml, bet)
F3 %>% gt() %>%
data_color(
columns = bet,
colors = scales::col_numeric(
palette = paletteer::paletteer_d(
palette = "ggsci::blue_material"
) %>% as.character(),
domain = NULL
)
)
}
E7 %>% gt() %>%
data_color(
columns = bet,
colors = scales::col_numeric(
palette = paletteer::paletteer_d(
palette = "ggsci::blue_material"
) %>% as.character(),
domain = NULL
)
)
F3 %>% gt() %>%
data_color(
columns = bet,
colors = scales::col_numeric(
palette = paletteer::paletteer_d(
palette = "ggsci::blue_material"
) %>% as.character(),
domain = NULL
)
)
## EV cutoff
F1 <- E6 %>% mutate(EV = p-implied.p)
F2 <- F1 %>% filter(EV >= .0999) %>% mutate(bet = EV * 50/sum(EV))
F3 <- F2 %>% select(team, opp, ml, bet)
F3 %>% gt() %>%
data_color(
columns = bet,
colors = scales::col_numeric(
palette = paletteer::paletteer_d(
palette = "ggsci::blue_material"
) %>% as.character(),
domain = NULL
)
)
setwd("~/Desktop/TTO_/rstan_0")
?stan
?sampling
stan
model
?stan
?stan_model
?sampling
?stand_model
?stan_model
?sampling
library(tidyverse)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
# read data
#D <- read_csv("design_matrix_0.csv")
D <- read_csv("design_matrix_0.csv", col_types = "ddddddddddcccc")
names(D)
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X = as.matrix(X0)
# response variable
y = D$EVENT_WOBA
tto3_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
file = 'tto3.stan'
m1 <- stan_model(file = file, model_name = "EVENT_WOBA vs. BATTER_IDX and ORDER_CT")
# sample
fit <- sampling(m1, data = tto3_dat, pars = c("beta"), iter = 1000, chains = 1,
seed = 12345)
fit
fit_summary <- summary(fit)
fit_summary
fit
print(fit)
stan_hist(fit)
?stan-hist
?stan_hist
stan_hist(fit, include=FALSE, pars=NULL)
fit
colnames(X)
library(tidyverse)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
################################
#### COMPILER OPTIMIZATIONS ####
################################
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
################################
########### THE DATA ###########
################################
# read data
#D <- read_csv("design_matrix_0.csv")
D <- read_csv("design_matrix_0.csv", col_types = "ddddddddddcccc")
names(D)
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X = as.matrix(X0)
# response variable
y = D$EVENT_WOBA
#############################
########### RSTAN ###########
#############################
tto3_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
# compile .stan file
file = 'tto3.stan'
m1 <- stan_model(file = file, model_name = "EVENT_WOBA vs. BATTER_IDX and ORDER_CT")
# obtain posterior samples of the parameters
fit <- sampling(m1, data = tto3_dat, pars = c("beta"), iter = 1000, chains = 1,
seed = 12345)
#fit_summary <- summary(fit)
fit
stan_hist(fit, pars=NULL, include=FALSE)
data
dat
library(tidyverse)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
# read data
#D <- read_csv("design_matrix_0.csv")
D <- read_csv("design_matrix_0.csv", col_types = "ddddddddddcccc")
names(D)
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X0
names(D)
head(D)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X1 = bind_cols(D %>% select(WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH, BAT_HOME_IND,
PIT_REST, DAYS_SINCE_SZN_START, IN_DIV, IN_LEAGUE,
PITCH_COUNT_CUMU), X0)
X1
# design matrix & response variable
X = as.matrix(X1)
y = D$EVENT_WOBA
colnames(X)
dim(X)
tto_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
# compile .stan file
file = 'tto3.stan'
model <- stan_model(file = file, model_name = "EVENT_WOBA vs. BATTER_IDX and ORDER_CT")
model
# compile .stan file
file = 'tto4.stan'
model <- stan_model(file = file, model_name = "linear regression, ind. normal priors")
model
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, pars = c("beta"),
iter = 1000, chains = 1, seed = 12345)
X2 = X1 %>% drop_na() #FIXME
# design matrix & response variable
X = as.matrix(X2)
y = D$EVENT_WOBA
tto_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, pars = c("beta"),
iter = 1000, chains = 1, seed = 12345)
D <- D %>% drop_na() #FIXME
dim(D)
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X1 = bind_cols(D %>% select(WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH, BAT_HOME_IND,
PIT_REST, DAYS_SINCE_SZN_START, IN_DIV, IN_LEAGUE,
PITCH_COUNT_CUMU), X0)
# design matrix & response variable
X = as.matrix(X1)
y = D$EVENT_WOBA
tto_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, pars = c("beta"),
iter = 1000, chains = 1, seed = 12345)
1225.14/60
fit
colnames(X)
fit
stan_hist(fit, pars=NULL, include=FALSE)
traceplot(fit)
traceplot(fit,pars=NULL, include=FALSE)
traceplot(fit,pars=NULL, include=FALSE)
traceplot(fit,pars=c("beta"))
?write_stan
?write_stan_file
fit
?saveRDS
fit
class(fit)
type(fit)
# save the stan object
saveRDS(fit, file = "fit_04.rds")
draws <- as.matrix(fit)
draws
dim(draws)
rm(fit)
load("fit_04.rds")
fit <- readRDS("fit_04.rds")
fit
class(fit)
