pop_data = crime_data = read_csv("../../data/Statewide_pop.dat")
pop_data
crime_data
crime_data = read_tsv("../../data/Statewide_crime.dat")
pop_data
crime_data = read_tsv("../../data/Statewide_crime.dat")
crime_data
pop_data
print(pop_data, n = 5)
print(crime_data, n = 5)
crime_data = read_tsv("../../data/Statewide_crime.dat")
print(crime_data, n = 5)
pop_data = read_csv("../../data/Statewide_pop.dat")
print(pop_data, n = 5)
pop_data = read_csv("../../data/Statewide_pop.dat")
print(pop_data, n = 5)
print(crime_data, n = 5)
print(pop_data, n = 5)
abbrev_data = read_csv("../../data/Statewide_abbrev.dat")
abbrev_data = read_csv("../../data/Statewide_abbrev.csv")
abbrev_data
print(crime_data, n = 5)
pop_data1 <- dplyr::left_join(pop_data, abbrev_data)
pop_data1
View(pop_data1)
nrow(pop_data)
nrow(abbrev_data)
crime_data
pop_data1
pop_data0 = read_csv("../../data/Statewide_pop.dat")
abbrev_data = read_csv("../../data/Statewide_abbrev.csv")
pop_data <- dplyr::left_join(pop_data0, abbrev_data)
pop_data <- pop_data %>% rename(STATE = Code, pop=`2018 Population`) %>% select(STATE,pop)
print(pop_data, n = 5)
crime_data0 = read_tsv("../../data/Statewide_crime.dat")
print(crime_data0, n = 5)
crime_data <- dplyr::left_join(crime_data0, pop_data)
print(crime_data, n = 5)
pop_data <- pop_data %>% rename(STATE = Code, Pop=`2018 Population`) %>%
select(STATE,Pop)
pop_data0 = read_csv("../../data/Statewide_pop.dat")
abbrev_data = read_csv("../../data/Statewide_abbrev.csv")
pop_data <- dplyr::left_join(pop_data0, abbrev_data)
pop_data <- pop_data %>% rename(STATE = Code, Pop=`2018 Population`) %>%
select(STATE,Pop)
crime_data <- dplyr::left_join(crime_data0, pop_data)
print(crime_data, n = 5)
pop_data0 = read_csv("../../data/Statewide_pop.dat")
abbrev_data = read_csv("../../data/Statewide_abbrev.csv")
pop_data <- left_join(pop_data0, abbrev_data)
pop_data <- pop_data %>% rename(STATE = Code, Pop=`2018 Population`) %>%
select(STATE,Pop)
crime_data <- left_join(crime_data0, pop_data) %>% mutate(CrimeRate = Violent/Pop)
print(crime_data, n = 5)
crime_data
# pairs plot
GGally::ggpairs(crime_data %>% select(CrimeRate, Metro, HighSchool))
# pairs plot
GGally::ggpairs(crime_data %>% select(CrimeRate, Metro, HighSchool,Poverty))
quantile(crime_data$Metro)
quantile(crime_data$Metro[.25])
quantile(crime_data$Metro,.25)
quantile(crime_data$Metro,.25)[[1]]
c(quantile(crime_data$Metro,.05)[[1]],quantile(crime_data$Metro,.95)[[1]])
# linear model
m <- lm(CrimeRate ~ Metro + HighSchool + Poverty, data=crime_data)
m
summary(m)
# confidence intervals
confint(m, level = 0.95)
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
install.packages("kableExtra")
library(kableExtra)
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable("figures/3c_CI_table.png")
webshot::install_phantomjs()
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable("figures/3c_CI_table.png")
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable("figure/3c_CI_table.png")
install.packages(magick)
install.packages("magick")
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable("figure/3c_CI_table.png")
"%"
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "95% Confidence Intervals for Coefficients of Socioeconomic Metrics") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
save_kable("figure/3c_CI_table.png")
# confidence intervals
confint(m, level = 0.95) %>%
kbl(caption = "95% Confidence Intervals for Coefficients of Socioeconomic Metrics") %>%
kable_classic(full_width = F) %>%
save_kable("figure/3c_CI_table.png")
confint(m, level = 0.95) %>%
kable(format = "latex", row.names = NA, booktabs = TRUE, digits = 2) #%>%
We hit an error when trying to use magick to read the generated PDF file. You may check your magick installation and try to use magick::image_read to read the PDF file manually. It's also possible that you didn't have ghostscript installed.
library(kableExtra)
library(magick)
library(webshot)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox/Mac/Desktop/TTO_/rstan_0")
library(tidyverse)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
# read data
#D <- read_csv("design_matrix_0.csv")
input_file = "design_matrix_2015-2020.csv" #"design_matrix_2020.csv"
D <- read_csv(input_file, col_types = "ddddddddddcccc")
names(D)
D <- D %>% drop_na() #FIXME
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
# design matrix & response variable
X = as.matrix(X0)
y = D$EVENT_WOBA
head(X)
BATTER_IDX_dummies
BATTER_IDX_dummies <- BATTER_IDX_dummies %>% select(-`(Intercept)`) %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>% select(-`(Intercept)`) %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
BATTER_IDX_dummies
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12) %>%
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
BATTER_IDX_dummies
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
BATTER_IDX_dummies
BATTER_IDX_dummies %>% select(-`(Intercept)`)
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX + 0) # NO INTERCEPT!
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = BATTER_IDX1) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
BATTER_IDX_dummies
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX + 0) # NO INTERCEPT!
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = BATTER_IDX1) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT + 0) # NO INTERCEPT!
ORDER_CT_dummies
# design matrices
X_bidx = as.matrix(BATTER_IDX_dummies)
X_ordct = as.matrix(ORDER_CT_dummies)
# response variable
y = D$EVENT_WOBA
y
head(ty)
head(y)
head(X_bidx)
dim(X_bidx)
dim(y)
length(y)
ORDER_CT_dummies
# create dummy variables for the categorical variables
# NO INTERCEPT and INCLUDE FIRST COLUMN
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX + 0)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = BATTER_IDX1) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
# NO INTERCEPT and INCLUDE FIRST COLUMN
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT + 0)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
Head(X_b)
head(X_b)
head(X_o)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
# response variable
y = D$EVENT_WOBA
tto_dat <- list(n = nrow(X),
p_b = ncol(X_b),
p_o = ncol(X_o),
X_b = X_b,
X_o = X_o,
y = y)
# compile .stan file
file = 'tto5.stan'
model <- stan_model(file = file, model_name = "linear regression, ind. normal priors")
model
# read data
#D <- read_csv("design_matrix_0.csv")
input_file = "design_matrix_2020.csv" #"design_matrix_2015-2020.csv"
D <- read_csv(input_file, col_types = "ddddddddddcccc")
names(D)
D <- D %>% drop_na() #FIXME
# create dummy variables for the categorical variables
# NO INTERCEPT and INCLUDE FIRST COLUMN
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX + 0)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = BATTER_IDX1) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
# NO INTERCEPT and INCLUDE FIRST COLUMN
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT + 0)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
# response variable
y = D$EVENT_WOBA
X_b
head(X_b)
head(X_o)
y
tto_dat <- list(n = nrow(X),
p_b = ncol(X_b),
p_o = ncol(X_o),
X_b = X_b,
X_o = X_o,
y = y)
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, #pars = c("beta_o", "beta_b", "tau_o", "tau_b", "sigma"),
iter = 1000, chains = 1, seed = 12345)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
# response variable
y = D$EVENT_WOBA
dim(X_b)
dim(X_o)
length(y)
tto_dat <- list(n = nrow(X),
p_b = ncol(X_b),
p_o = ncol(X_o),
X_b = X_b,
X_o = X_o,
y = y)
tto_dat$p_b
tto_dat$n
tto_dat <- list(n = nrow(y),
p_b = ncol(X_b),
p_o = ncol(X_o),
X_b = X_b,
X_o = X_o,
y = y)
tto_dat$n
tto_dat <- list(n = length(y),
p_b = ncol(X_b),
p_o = ncol(X_o),
X_b = X_b,
X_o = X_o,
y = y)
tto_dat$n
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, #pars = c("beta_o", "beta_b", "tau_o", "tau_b", "sigma"),
iter = 1000, chains = 1, seed = 12345)
fit
s <- summary(fit)
fit[1:20,]
s <- summary(fit)
s[1:20,]
s$summary[1:20,]
s$summary[1:25,]
s$summary[1:22,]
as.matrix(s$summary[1:22,])
draws <- as_tibble(as.matrix(fit))
dim(draws)
head(draws[1:22,])
head(draws[,1:22])
draws <- draws[,1:22]
draws
c("beta_b0", "beta_b1", colnames(X_b), colnames(X_o), "tau_b", "tau_o", "sigma")
names(draws) <- c("beta_b0", "beta_b1", colnames(X_b), colnames(X_o), "tau_b", "tau_o", "sigma")
draws
# save the stan object
saveRDS(fit, file = "fit_05_2015-2020_.rds")
ss <- s$summary[1:22,]
ss
A0 = tibble(draws) %>% mutate(b11 = BATTER_IDX1 + ORDER_CT1,
b12 = BATTER_IDX2 + ORDER_CT1,
b13 = BATTER_IDX3 + ORDER_CT1,
b14 = BATTER_IDX4 + ORDER_CT1,
b15 = BATTER_IDX5 + ORDER_CT1,
b16 = BATTER_IDX6 + ORDER_CT1,
b17 = BATTER_IDX7 + ORDER_CT1,
b18 = BATTER_IDX8 + ORDER_CT1,
b19 = BATTER_IDX9 + ORDER_CT1,
b21 = BATTER_IDX1 + ORDER_CT2,
b22 = BATTER_IDX2 + ORDER_CT2,
b23 = BATTER_IDX3 + ORDER_CT2,
b24 = BATTER_IDX4 + ORDER_CT2,
b25 = BATTER_IDX5 + ORDER_CT2,
b26 = BATTER_IDX6 + ORDER_CT2,
b27 = BATTER_IDX7 + ORDER_CT2,
b28 = BATTER_IDX8 + ORDER_CT2,
b29 = BATTER_IDX9 + ORDER_CT2,
b31 = BATTER_IDX1 + ORDER_CT3,
b32 = BATTER_IDX2 + ORDER_CT3,
b33 = BATTER_IDX3 + ORDER_CT3,
b34 = BATTER_IDX4 + ORDER_CT3,
b35 = BATTER_IDX5 + ORDER_CT3,
b36 = BATTER_IDX6 + ORDER_CT3,
b37 = BATTER_IDX7 + ORDER_CT3,
b38 = BATTER_IDX8 + ORDER_CT3,
b39 = BATTER_IDX9 + ORDER_CT3) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
A2 = reshape2::melt(A0)
A0
library(ggthemes)
theme_set(theme_classic())
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "time thru order number + batter index number",
title = "Pitchers Exhibit Continuous Fatigue")
plot1
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "time thru order number + batter index number",
title = "")
plot1
x = seq(.1,.5,length=100)
y = dnorm(x, mean=.3, sd=.03)
plot(x,y)
draws %>% ggplot(aes(x=BATTER_IDX11)) + geom_density() + stat_function(fun=dnorm, args = list(mean=.3, sd=.03), col="red")
plot1
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "time thru order number + batter index number",
title = "")
plot1
ss
rownames(ss) <- names(draws)
ss
0.71448664-0.38999858
library(tidyverse)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
# read data
#D <- read_csv("design_matrix_0.csv")
input_file = "design_matrix_2020.csv" #"design_matrix_2015-2020.csv"
D <- read_csv(input_file, col_types = "ddddddddddcccc")
names(D)
D <- D %>% drop_na() #FIXME
# create dummy variables for the categorical variables
# NO INTERCEPT and INCLUDE FIRST COLUMN
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX + 0)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = BATTER_IDX1) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
# NO INTERCEPT and INCLUDE FIRST COLUMN
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT + 0)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
# response variable
y = D$EVENT_WOBA
tto_dat <- list(n = length(y),
p_b = ncol(X_b),
p_o = ncol(X_o),
X_b = X_b,
X_o = X_o,
y = y)
# compile .stan file
file = 'tto6.stan'
model <- stan_model(file = file, model_name = "linear regression, ind. normal priors")
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat,
pars = c("beta_b0", "beta_o0", "beta_b", "beta_o", "tau_b", "tau_o", "sigma"),
iter = 1000, chains = 1, seed = 12345)
