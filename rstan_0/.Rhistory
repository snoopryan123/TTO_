relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X0
names(D)
head(D)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X1 = bind_cols(D %>% select(WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH, BAT_HOME_IND,
PIT_REST, DAYS_SINCE_SZN_START, IN_DIV, IN_LEAGUE,
PITCH_COUNT_CUMU), X0)
X1
# design matrix & response variable
X = as.matrix(X1)
y = D$EVENT_WOBA
colnames(X)
dim(X)
tto_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
# compile .stan file
file = 'tto3.stan'
model <- stan_model(file = file, model_name = "EVENT_WOBA vs. BATTER_IDX and ORDER_CT")
model
# compile .stan file
file = 'tto4.stan'
model <- stan_model(file = file, model_name = "linear regression, ind. normal priors")
model
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, pars = c("beta"),
iter = 1000, chains = 1, seed = 12345)
X2 = X1 %>% drop_na() #FIXME
# design matrix & response variable
X = as.matrix(X2)
y = D$EVENT_WOBA
tto_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, pars = c("beta"),
iter = 1000, chains = 1, seed = 12345)
D <- D %>% drop_na() #FIXME
dim(D)
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X1 = bind_cols(D %>% select(WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH, BAT_HOME_IND,
PIT_REST, DAYS_SINCE_SZN_START, IN_DIV, IN_LEAGUE,
PITCH_COUNT_CUMU), X0)
# design matrix & response variable
X = as.matrix(X1)
y = D$EVENT_WOBA
tto_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, pars = c("beta"),
iter = 1000, chains = 1, seed = 12345)
1225.14/60
fit
colnames(X)
fit
stan_hist(fit, pars=NULL, include=FALSE)
traceplot(fit)
traceplot(fit,pars=NULL, include=FALSE)
traceplot(fit,pars=NULL, include=FALSE)
traceplot(fit,pars=c("beta"))
?write_stan
?write_stan_file
fit
?saveRDS
fit
class(fit)
type(fit)
# save the stan object
saveRDS(fit, file = "fit_04.rds")
draws <- as.matrix(fit)
draws
dim(draws)
rm(fit)
load("fit_04.rds")
fit <- readRDS("fit_04.rds")
fit
class(fit)
library(tidyverse)
input_filename = "retro_final_PA_1990-2020.csv" #"retro_final_PA_2020.csv"
D0 <- read_csv(input_filename)
spec(D0)
D0 <- D0 %>% filter(YEAR >= 2015) #FIXME
nrow(D0)
unique(D)$YEAR
unique(D$YEAR)
unique(D0$YEAR)
View(D0)
# only include starting pitchers and wOBA-appearances
D1 <- D0 %>% filter(SP_IND == 1, WOBA_APP == 1)
# select relevant columns, and view this
D2 <- D1 %>% select(GAME_ID, INNING, BAT_NAME, PIT_NAME,
EVENT_WOBA, WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH,
BAT_HOME_IND, PIT_REST, DAYS_SINCE_SZN_START,
IN_DIV, IN_LEAGUE, PITCH_COUNT_CUMU,
FIELD_POS, OUTS_CT,
#PARK, BATTER_SEQ_NUM)
ORDER_CT) %>%
mutate(across(HAND_MATCH, as.integer)) %>%
mutate(across(IN_DIV, as.integer)) %>%
mutate(across(IN_LEAGUE, as.integer))
# create BATTER_IDX
# BATTER_IDX === given the game and the team, assign the batters an integer {1,2,3,...} in order of appearance in the game
D3 <- D2 %>% group_by(GAME_ID, BAT_HOME_IND) %>%
mutate(BATTER_IDX = match(BAT_NAME, unique(BAT_NAME))) %>%
ungroup()
# `character` columns for the categorical variables
D4 <- D3 %>%  mutate(across(FIELD_POS, as.character)) %>%
mutate(across(OUTS_CT, as.character)) %>%
mutate(across(ORDER_CT, as.character)) %>%
mutate(across(BATTER_IDX, as.character))
# remove columns only meant for viewing
D5 <- D4 %>% select(-c(GAME_ID, INNING, BAT_NAME, PIT_NAME))
# design matrix!
X <- D5
colnames(X)
dim(X)
write_csv(X, "design_matrix_2015-2020.csv")
library(tidyverse)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
# read data
#D <- read_csv("design_matrix_0.csv")
input_file = "design_matrix_2015-2020.csv" #"design_matrix_2020.csv"
D <- read_csv(input_file, col_types = "ddddddddddcccc")
names(D)
D <- D %>% drop_na() #FIXME
dim(D)
# create dummy variables for the categorical variables
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = `(Intercept)`) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8) %>%
relocate(BATTER_IDX10, .after = BATTER_IDX9) %>%
relocate(BATTER_IDX11, .after = BATTER_IDX10) %>%
relocate(BATTER_IDX12, .after = BATTER_IDX11) %>%
relocate(BATTER_IDX13, .after = BATTER_IDX12)
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT) %>% select(-`(Intercept)`)
# design matrix
X0 = bind_cols(BATTER_IDX_dummies, ORDER_CT_dummies)
X1 = bind_cols(D %>% select(WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH, BAT_HOME_IND,
PIT_REST, DAYS_SINCE_SZN_START, IN_DIV, IN_LEAGUE,
PITCH_COUNT_CUMU), X0)
# design matrix & response variable
X = as.matrix(X1)
y = D$EVENT_WOBA
colnames(X)
dim(X)
length(Y)
length(y)
tto_dat <- list(n = nrow(X),
p = ncol(X),
X = X,
y = y)
# compile .stan file
file = 'tto4.stan'
model <- stan_model(file = file, model_name = "linear regression, ind. normal priors")
# obtain posterior samples of the parameters
fit <- sampling(model, data = tto_dat, pars = c("beta"),
iter = 2000, chains = 1, seed = 12345)
fit
colnanes(X)
colnames(X)
fit
fit
stan_hist(fit, pars=c("beta"))
# save the stan object
saveRDS(fit, file = "fit_04_2015-2020.rds")
stan_hist(fit, pars=c("beta"))
draws <- as.matrix(fit)
fit
draws
dim(draws)
dim(X)
colnames(X)
colnames(draws)
rbind(c(colnames(X), "lp__"), colnames(draws))
rbind(c(colnames(X), "lp__"), colnames(draws))
A0 = tibble(draws) %>% mutate(b11 = `beta[10]`,
b12 = `beta[10]` + `beta[11]`,
b13 = `beta[10]` + `beta[12]`,
b14 = `beta[10]` + `beta[13]`,
b15 = `beta[10]` + `beta[14]`,
b16 = `beta[10]` + `beta[15]`,
b17 = `beta[10]` + `beta[16]`,
b18 = `beta[10]` + `beta[17]`,
b19 = `beta[10]` + `beta[18]`,
b21 = `beta[10]` + `beta[26]`,
b22 = `beta[10]` + `beta[26]` + `beta[11]`,
b23 = `beta[10]` + `beta[26]` + `beta[12]`,
b24 = `beta[10]` + `beta[26]` + `beta[13]`,
b25 = `beta[10]` + `beta[26]` + `beta[14]`,
b26 = `beta[10]` + `beta[26]` + `beta[15]`,
b27 = `beta[10]` + `beta[26]` + `beta[16]`,
b28 = `beta[10]` + `beta[26]` + `beta[17]`,
b29 = `beta[10]` + `beta[26]` + `beta[18]`,
b31 = `beta[10]` + `beta[27]`,
b32 = `beta[10]` + `beta[27]` + `beta[11]`,
b33 = `beta[10]` + `beta[27]` + `beta[12]`,
b34 = `beta[10]` + `beta[27]` + `beta[13]`,
b35 = `beta[10]` + `beta[27]` + `beta[14]`,
b36 = `beta[10]` + `beta[27]` + `beta[15]`,
b37 = `beta[10]` + `beta[27]` + `beta[16]`,
b38 = `beta[10]` + `beta[27]` + `beta[17]`,
b39 = `beta[10]` + `beta[27]` + `beta[18]`) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
draws
tibble(draws)
ddd=tibble(draws)
ddd$draws
ddd$`beta[10]1`
ddd$`beta[10]`
ddd$`beta[10]`
colnames(ddd)
ddd$draws
draws
ddd
ddd[,1]
ddd[[1]]
draws
ddd=as_tibble(draws)
ddd
ddd$`beta[1]`
rm(ddd)
A0 = as_tibble(draws) %>% mutate(b11 = `beta[10]`,
b12 = `beta[10]` + `beta[11]`,
b13 = `beta[10]` + `beta[12]`,
b14 = `beta[10]` + `beta[13]`,
b15 = `beta[10]` + `beta[14]`,
b16 = `beta[10]` + `beta[15]`,
b17 = `beta[10]` + `beta[16]`,
b18 = `beta[10]` + `beta[17]`,
b19 = `beta[10]` + `beta[18]`,
b21 = `beta[10]` + `beta[26]`,
b22 = `beta[10]` + `beta[26]` + `beta[11]`,
b23 = `beta[10]` + `beta[26]` + `beta[12]`,
b24 = `beta[10]` + `beta[26]` + `beta[13]`,
b25 = `beta[10]` + `beta[26]` + `beta[14]`,
b26 = `beta[10]` + `beta[26]` + `beta[15]`,
b27 = `beta[10]` + `beta[26]` + `beta[16]`,
b28 = `beta[10]` + `beta[26]` + `beta[17]`,
b29 = `beta[10]` + `beta[26]` + `beta[18]`,
b31 = `beta[10]` + `beta[27]`,
b32 = `beta[10]` + `beta[27]` + `beta[11]`,
b33 = `beta[10]` + `beta[27]` + `beta[12]`,
b34 = `beta[10]` + `beta[27]` + `beta[13]`,
b35 = `beta[10]` + `beta[27]` + `beta[14]`,
b36 = `beta[10]` + `beta[27]` + `beta[15]`,
b37 = `beta[10]` + `beta[27]` + `beta[16]`,
b38 = `beta[10]` + `beta[27]` + `beta[17]`,
b39 = `beta[10]` + `beta[27]` + `beta[18]`) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
A1 = reshape2::melt(A0)
ggplot(A1, aes(x=variable, y=value)) +
geom_boxplot()
theme_set(economics)
ggplot(A1, aes(x=variable, y=value)) +
geom_boxplot()
theme_set(wsj)
theme_set(economics_long)
economics_long
economics_long
ggplot(A1, aes(x=variable, y=value)) +
geom_boxplot()
ggplot(A1, aes(x=variable, y=value)) +
geom_boxplot()
theme_set(theme_wsj)
theme_set(theme_classic())
ggplot(A1, aes(x=variable, y=value)) +
geom_boxplot()
rbind(c(colnames(X), "lp__"), colnames(draws))
colnames_ = rbind(c(colnames(X), "lp__"), colnames(draws))
colnames_
fit
A1
A0
fit
colnames_
coefficients(fit)
fit$`beta[1]`
fit@beta[1]
fit@`beta[1]`
fit@stanmodel
fit
fit@model_name
fit@model_pars
fit@par_dims
fit@mode
fit@inits
fit@sim
fit$fnames_oi = c(colnames(X), "lp__")
fit
fit$sim
fit@sim
fit@stan_args
fit@stanmodel
fit
fit
mean(draws$`beta[1]`)
draws <- as_tibble(as.matrix(fit))
colnames_ = rbind(c(colnames(X), "lp__"), colnames(draws))
colnames_
names(draws)
names(draws) <- colnames(X), "lp__")
names(draws) <- c(colnames(X), "lp__")
draws <- as_tibble(as.matrix(fit))
names(draws) <- c(colnames(X), "lp__")
draws
A0 = tibble(draws) %>% mutate(b11 = `(Intercept)`,
b12 = `(Intercept)` + BATTER_IDX2,
b13 = `(Intercept)` + BATTER_IDX3,
b14 = `(Intercept)` + BATTER_IDX4,
b15 = `(Intercept)` + BATTER_IDX5,
b16 = `(Intercept)` + BATTER_IDX6,
b17 = `(Intercept)` + BATTER_IDX7,
b18 = `(Intercept)` + BATTER_IDX8,
b19 = `(Intercept)` + BATTER_IDX9,
b21 = `(Intercept)` + ORDER_CT2,
b22 = `(Intercept)` + BATTER_IDX2 + ORDER_CT2,
b23 = `(Intercept)` + BATTER_IDX3 + ORDER_CT2,
b24 = `(Intercept)` + BATTER_IDX4 + ORDER_CT2,
b25 = `(Intercept)` + BATTER_IDX5 + ORDER_CT2,
b26 = `(Intercept)` + BATTER_IDX6 + ORDER_CT2,
b27 = `(Intercept)` + BATTER_IDX7 + ORDER_CT2,
b28 = `(Intercept)` + BATTER_IDX8 + ORDER_CT2,
b29 = `(Intercept)` + BATTER_IDX9 + ORDER_CT2,
b31 = `(Intercept)` + ORDER_CT3,
b32 = `(Intercept)` + BATTER_IDX2 + ORDER_CT3,
b33 = `(Intercept)` + BATTER_IDX3 + ORDER_CT3,
b34 = `(Intercept)` + BATTER_IDX4 + ORDER_CT3,
b35 = `(Intercept)` + BATTER_IDX5 + ORDER_CT3,
b36 = `(Intercept)` + BATTER_IDX6 + ORDER_CT3,
b37 = `(Intercept)` + BATTER_IDX7 + ORDER_CT3,
b38 = `(Intercept)` + BATTER_IDX8 + ORDER_CT3,
b39 = `(Intercept)` + BATTER_IDX9 + ORDER_CT3) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
A1 = reshape2::melt(A0)
ggplot(A1, aes(x=variable, y=value)) +
geom_boxplot()
A0
draws
mean(draws$WOBA_CUMU_BAT)
fit
names(draws)
mean(draws$HAND_MATCH)
mean(draws$BAT_HOME_IND)
mean(draws$PIT_REST)
mean(draws$DAYS_SINCE_SZN_START)
mean(draws$IN_DIV)
mean(draws$IN_LEAGUE)
mean(draws$PITCH_COUNT_CUMU)
A1 = A0 + mean(draws$WOBA_CUMU_BAT) * (.315) +
mean(draws$WOBA_CUMU_PIT) * (.315) +
mean(draws$HAND_MATCH) * 0 +
mean(draws$BAT_HOME_IND) * 1 +
mean(draws$PIT_REST) * 5 +
mean(draws$DAYS_SINCE_SZN_START) * 30 +
mean(draws$IN_DIV) * 1 +
mean(draws$IN_LEAGUE) * 1 +
mean(draws$PITCH_COUNT_CUMU) * 0
A1
A2 = reshape2::melt(A1)
#library(ggthemes)
theme_set(theme_classic())
library(ggthemes)
theme_set(theme_classic())
ggplot(A2, aes(x=variable, y=value)) +
geom_boxplot()
A1 = A0 + mean(draws$WOBA_CUMU_BAT) * (.3) +
mean(draws$WOBA_CUMU_PIT) * (.3) +
mean(draws$HAND_MATCH) * 0 +
mean(draws$BAT_HOME_IND) * 1 +
mean(draws$PIT_REST) * 5 +
mean(draws$DAYS_SINCE_SZN_START) * 30 +
mean(draws$IN_DIV) * 1 +
mean(draws$IN_LEAGUE) * 1 +
mean(draws$PITCH_COUNT_CUMU) * 0
A2 = reshape2::melt(A1)
library(ggthemes)
theme_set(theme_classic())
ggplot(A2, aes(x=variable, y=value)) +
geom_boxplot()
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="foo")
plot1
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA")
plot1
library(ggthemes)
theme_set(theme_classic())
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "batter index number + time thru order number",
main = "Pitcher's Exhibit Continuous Fatigue")
plot1
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "batter index number + time thru order number",
title = "Pitcher's Exhibit Continuous Fatigue")
plot1
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "batter index number + time thru order number",
title = "Pitchers Exhibit Continuous Fatigue")
plot1
traceplot(fit,pars=c("beta"))
names(draws)
#draws <- as.matrix(fit)
#rm(fit)
fit1 <- readRDS("fit_04_2015-2020_.rds")
fit1
fit
# save the stan object
saveRDS(fit, file = "fit_04_2015-2020_.rds")
#draws <- as.matrix(fit)
#rm(fit)
fit1 <- readRDS("fit_04_2015-2020_.rds")
fit1
fit
fit@model_pars
fit@sim$n_flatnames
fit@sim$pars_oi
fit@sim$fnames_oi
fit@sim$fnames_oi <- names(draws)
fit
names(draws)
fit@sim$fnames_oi <- names(draws)
fit
fit[1,]
fit@sim$fnames_oi
fit@sim
fit@sim$samples
names(fit@sim$samples)
colnames(fit@sim$samples)
fit@sim$samples[[1]]
fit@sim$samples[,1]
fit@sim$samples[1,]
fit@sim$samples[1]
fit
fit_summary
fit_summary <- summary(fit)
fit_summary
f <- fit_summary$summary
f
f
rownames(f)
rownames(f) <- names(draws)
f
f
f
f %>% select(mean, n_eff, Rhat)
f <- as_tibble(fit_summary$summary)
as_tibblef %>% select(mean, n_eff, Rhat)f
f
f <- fit_summary$summary
f
f[,c(1,-1,-2)]
f[,c(1,9,10)]
f <- fit_summary$summary
rownames(f) <- names(draws)
f[,c(1,9,10)]
fit <- readRDS("fit_04_2015-2020_.rds")
draws <- as_tibble(as.matrix(fit))
names(draws) <- c(colnames(X), "lp__")
fit_summary <- summary(fit)
f <- fit_summary$summary
rownames(f) <- names(draws)
f[,c(1,9,10)]
