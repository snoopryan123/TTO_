# PA_IND (plate appearance) (so, not a substitution or stolen base).
# Definition:   https://en.wikipedia.org/wiki/Plate_appearance
E2 <- E1 %>%  group_by(GAME_ID, BAT_HOME_IND) %>%
mutate(x = lead(BAT_ID) != BAT_ID,
x = replace_na(x, TRUE),
PA_IND_0 = x) %>% select(!c(x)) %>%
ungroup()
# 1. A batter is not credited with a plate appearance if, while batting, a preceding runner is put out on the basepaths for the
#    third out in a way other than by the batter putting the ball into play (i.e., picked off, caught stealing).
E2a <- E2 %>% group_by(GAME_ID, BAT_HOME_IND) %>% slice_tail() %>%
mutate(x = as.logical(str_count(EVENT_TX, "CS[23H]") - str_count(EVENT_TX, "CS[23H]\\([0-9]*E"))) %>% ungroup()
E2b <- left_join(E2, E2a) %>% mutate(x = replace_na(x, FALSE)) %>% mutate(PA_IND_1 = PA_IND_0 & !x) %>% select(!c(x))
# 2. A batter is not credited with a plate appearance if, while batting, the game ends as the winning run scores from third base on a
#    balk, stolen base, wild pitch, or passed ball.
E2c <- E2b %>% group_by(GAME_ID) %>% slice_tail() %>%
mutate(x = as.logical(str_detect(EVENT_TX, "^BK") | str_detect(EVENT_TX, "^SB") |
str_detect(EVENT_TX, "^WP") | str_detect(EVENT_TX, "^PB"))) %>%
ungroup()
E2d <- left_join(E2b, E2c) %>% mutate(x = replace_na(x, FALSE)) %>% mutate(PA_IND_2 = PA_IND_1 & !x) %>% select(!c(x))
#    plate appearance (and potential of an at-bat) unless the original batter  is replaced when having 2 strikes against him
#    and the pinch hitter subsequently completes the strikeout, in which case the plate appearance and at-bat are charged
#    to the first batter.
# Checks:
# View(E2d %>% filter(EVENT_TX == "NP"))
# View(E2d %>% filter(EVENT_TX == "NP") %>% select(EVENT_TX, PITCH_SEQ_TX, PA_IND_2))
# View(E2d %>% filter(EVENT_TX == "NP", PA_IND_2) %>%
#      select(GAME_ID, INNING, BAT_HOME_IND, BAT_NAME, PIT_NAME, PITCH_SEQ_TX, EVENT_TX, PA_IND_2))
# View(E2d %>% filter(GAME_ID == "TEX202009090", INNING==4) %>%
#        select(GAME_ID, INNING, BAT_HOME_IND, BAT_NAME, PIT_NAME, PITCH_SEQ_TX, EVENT_TX, PA_IND_2))
E2e <- E2d %>% mutate(PA_IND_3 = ifelse(EVENT_TX == "NP", FALSE, PA_IND_2))
E2_final <- E2e %>% mutate(PA_IND = PA_IND_3) %>% select(names(E1), PA_IND)
rm(E2); rm(E2a); rm(E2b); rm(E2c); rm(E2d); rm(E2e);
print("E2")
# AB_IND (at bat)
# AT-BAT is a PLATE-APPEARANCE without {SF,SH(sacBunt),W,IW,HP,C(catcher interference)}
# https://www.retrosheet.org/eventfile.htm
E3 <- E2_final %>% mutate(AB_IND = PA_IND & !(str_detect(EVENT_TX, "SF") & !str_detect(EVENT_TX, "\\/FL")) &
!(str_detect(EVENT_TX, "SH") & !str_detect(EVENT_TX, "\\/FL")) &
#!(str_detect(EVENT_TX, "^W") & !str_detect(EVENT_TX, "^WP")) &
!str_detect(EVENT_TX, "^W") &
!str_detect(EVENT_TX, "^IW") &
!str_detect(EVENT_TX, "^HP") & !str_detect(EVENT_TX, "^C"))
print("E3")
# WOBA_APP === TRUE iff it is a wOBA-appearance, i.e. in {AB,W,SF,HP}\{IW}
# SH (sacrifice hit/bunt) is not part of wOBA!
E4 <- E3 %>% mutate(WOBA_APP = (AB_IND | (str_detect(EVENT_TX, "^W") & !str_detect(EVENT_TX, "^WP")) |
(str_detect(EVENT_TX, "SF") & !str_detect(EVENT_TX, "\\/FL")) | #str_detect(EVENT_TX, "SF") |
str_detect(EVENT_TX, "^HP")) &
!str_detect(EVENT_TX, "^IW"))
# E4 <- E3 %>% mutate(WOBA_APP = PA_IND & !str_detect(EVENT_TX, "^IW") & !str_detect(EVENT_TX, "^C") &  !str_detect(EVENT_TX, "^INT") )
print("E4")
# EVENT_WOBA === wOBA of this event
# https://www.fangraphs.com/guts.aspx?type=cn
# HP, is an AB and PA.
# SH, SF, IW, W are PA but not AB
# an event is a WOBA_EVENT iff it is an {AB, W, SH, SF, HP} but not {IW}. Equivalently, {PA}\{IW}
# ---> include all plate appearances as wOBA except intentional walks !!!
E5 = E4 %>% mutate(EVENT_WOBA =
ifelse(WOBA_APP & HIT_VAL == 1, W$w1B, # single
ifelse(WOBA_APP & HIT_VAL == 2, W$w2B, # double
ifelse(WOBA_APP & HIT_VAL == 3, W$w3B, # triple
ifelse(WOBA_APP & HIT_VAL == 4, W$wHR, # HR
ifelse(WOBA_APP & EVENT_CODE == "W", W$wBB, # uBB / NIBB
ifelse(WOBA_APP & EVENT_CODE == "HP", W$wHBP, # HBP / HP
#ifelse(EVENT_CD==18, 0.92, # RBOE (reached base on error) --> no longer in the woba formula
#ifelse(PA_IND &  (EVENT_CODE != "IW"), 0, NA )))))))) %>% ungroup()
0)))))))
print("E5")
E5
# WOBA_CUMU_BAT (INDIVIDUAL BATTER'S QUALITY)
E6 <- E5 %>% group_by(YEAR, BAT_ID) %>%
mutate(cumu.woba.sum.b = cumsum(replace_na(EVENT_WOBA, 0)),
cumu.woba.denom.b = cumsum(replace_na(WOBA_APP, 0)),
WOBA_CUMU_BAT = cumu.woba.sum.b/cumu.woba.denom.b) %>%
ungroup()
print("E6")
# WOBA_CUMU_PIT (INDIVIDUAL PITCHER'S QUALITY)
E7 <- E6 %>% group_by(YEAR, PIT_ID) %>%
mutate(cumu.woba.sum.p = cumsum(replace_na(EVENT_WOBA, 0)),
cumu.woba.denom.p = cumsum(replace_na(WOBA_APP, 0)),
WOBA_CUMU_PIT = cumu.woba.sum.p/cumu.woba.denom.p) %>%
ungroup()
print("E7")
# EVENT_RUNS === number of runs recorded during this event
# EVENT_ER_CT === number of earned runs recorded during this event (take into accoount UR)
# EVENT_RBI_CT === number of RBIs recorded during this event (take into accoount NR)
E8 = E7 %>% mutate(run_tx = str_extract(EVENT_TX, "([^.]+$)"),
num.home = str_count(run_tx, "-H"),
no.rbi = str_count(run_tx, "NR"),
unearned.runs = str_count(run_tx, "UR"),
hr.ind = ifelse(HIT_VAL == 4, 1, 0),
EVENT_RUNS = num.home + hr.ind,
EVENT_ER_CT = EVENT_RUNS - unearned.runs,
EVENT_RBI_CT = EVENT_RUNS - no.rbi) %>%
select(!c(run_tx, num.home, no.rbi, unearned.runs, hr.ind))
print("E8")
# EVENT_PITCH_COUNT== pitch count per event
# https://www.retrosheet.org/datause.txt    --> field 5
# pitches: C,S,B,F,X,T,H,L,M,P,K,U,Q,R   --> 14
# not a pitch: N,V,1,2,3,+,>,*,.,        --> 9
E9 = E8 %>% mutate(p = str_remove_all(PITCH_SEQ_TX, "[NV123\\+\\>\\*\\.]"),
EVENT_PITCH_COUNT = str_length(p)) %>%
select(!c(p))
print("E9")
# PITCH_COUNT_CUMU, PITCH_COUNT_FINAL
E10 <- E9 %>% group_by(GAME_ID, PIT_ID) %>%
mutate(PITCH_COUNT_CUMU = cumsum(replace_na(EVENT_PITCH_COUNT, 0)),
PITCH_COUNT_FINAL = sum(EVENT_PITCH_COUNT, na.rm=TRUE)) %>%
ungroup()
print("E10")
R = E10
R_ = R %>% select(!c(cumu.woba.sum.b, cumu.woba.denom.b, cumu.woba.sum.p, cumu.woba.denom.p))
write_csv(R_, output_filename)
w = W
w
### read TRUE WOBAS
TW0 = read_csv(str_glue("true_woba_{y}.csv"))
TW = TW0 %>% mutate(BAT_NAME = paste(first_name, last_name),wOBA_true=woba) %>% select(BAT_NAME, wOBA_true) %>%
arrange(-wOBA_true) %>%
mutate(BAT_NAME = str_replace_all(BAT_NAME, "á", "a"),
BAT_NAME = str_replace_all(BAT_NAME, "é", "e"),
BAT_NAME = str_replace_all(BAT_NAME, "í", "i"),
BAT_NAME = str_replace_all(BAT_NAME, "ó", "o"),
BAT_NAME = str_replace_all(BAT_NAME, "ñ", "n"))
### read TRUE WOBAS
TW0 = read_csv(str_glue("true_woba_{y}.csv"))
y=2019
w = W
### read TRUE WOBAS
TW0 = read_csv(str_glue("true_woba_{y}.csv"))
TW = TW0 %>% mutate(BAT_NAME = paste(first_name, last_name),wOBA_true=woba) %>% select(BAT_NAME, wOBA_true) %>%
arrange(-wOBA_true) %>%
mutate(BAT_NAME = str_replace_all(BAT_NAME, "á", "a"),
BAT_NAME = str_replace_all(BAT_NAME, "é", "e"),
BAT_NAME = str_replace_all(BAT_NAME, "í", "i"),
BAT_NAME = str_replace_all(BAT_NAME, "ó", "o"),
BAT_NAME = str_replace_all(BAT_NAME, "ñ", "n"))
# https://baseballsavant.mlb.com/leaderboard/expected_statistics?type=batter&year=2020&position=&team=&min=100&sort=11&sortDir=desc
# https://baseballsavant.mlb.com/leaderboard/expected_statistics?type=batter&year=2015&position=&team=&min=100&sort=11&sortDir=desc
R1 = R %>% filter(YEAR == y) %>% group_by(BAT_ID) %>% filter(row_number() == n()) %>% filter(cumu.woba.denom.b >= 150) %>%
ungroup() %>% mutate(wOBA=round(WOBA_CUMU_BAT,3)) %>%
arrange(-WOBA_CUMU_BAT) %>% select(BAT_ID, BAT_NAME, YEAR, wOBA, cumu.woba.denom.b, WOBA_CUMU_BAT) %>%
left_join(TW) %>% relocate(wOBA_true, .after = wOBA) %>% mutate(wOBA_diff = wOBA_true - wOBA) %>% relocate(wOBA_diff, .after = wOBA_true)
J
# "George Springer" in 2020 agrees with my calculation, see
# https://www.fangraphs.com/players/george-springer/12856/stats?position=OF
# "Josh Reddick" in 2015 agrees with my calculation, see
# https://www.fangraphs.com/players/josh-reddick/3892/stats?position=OF
# seems to be slight rounding errors... no biggie !!
N =  "Josh Reddick" #"Alex Dickerson"
R2 = R %>% filter(YEAR== y, BAT_NAME== N) %>%
summarise(G=length(unique(GAME_ID)), AB=sum(AB_IND), PA = sum(PA_IND),
H=sum(HIT_BINARY), S=sum(HIT_VAL==1), D=sum(HIT_VAL==2), T= sum(HIT_VAL==3), HR= sum(HIT_VAL==4),
W= sum(EVENT_CODE=="W"), IW=sum(EVENT_CODE=="IW"), BB=W+IW, HP= sum(EVENT_CODE=="HP"),
AVG = H/AB,
wOBA_num = (S*w$w1B + D*w$w2B + T*w$w3B + HR*w$wHR + W*w$wBB + HP*w$wHBP),
#wOBA_num = sum(EVENT_WOBA, na.rm = TRUE),
wOBA_APP = last(cumu.woba.denom.b),
wOBA = wOBA_num/(wOBA_APP)) %>%
select(!c(W)) %>% relocate(BB, .before=IW)
R2
R1 = R %>% group_by(BAT_ID) %>% filter(row_number() == n()) %>% filter(cumu.woba.denom.b >= 150) %>%
ungroup() %>% mutate(wOBA=round(WOBA_CUMU_BAT,3)) %>%
arrange(-WOBA_CUMU_BAT) %>% select(BAT_ID, BAT_NAME, YEAR, wOBA, cumu.woba.denom.b, WOBA_CUMU_BAT)
View(R1)
library(tidyverse)
input_filename = "retro06a_PA_1990-2020.csv"
output_filename = "retro07a_PA_1990-2020.csv"
E <- read_csv(input_filename)
E0 <- E #%>% filter(YEAR %in% c(2019,2020))
# DATE
E1 <- E0 %>% mutate(DATE = paste(str_sub(GAME_ID,4,7), str_sub(GAME_ID,8,9), str_sub(GAME_ID,10,11), sep="-"))
print("E1")
# DAYS_SINCE_SZN_START
E2 <- E1 %>% group_by(YEAR) %>% arrange(DATE) %>%
mutate(FIRST_DATE = min(DATE, na.rm=TRUE),
DAYS_SINCE_SZN_START = as.vector(difftime(DATE, FIRST_DATE, units="days"))) %>%
ungroup() %>% select(!c(FIRST_DATE))
print("E2")
# PIT_REST
max_date_val = 6
E3 <- E2 %>% group_by(YEAR, PIT_ID) %>% arrange(DATE) %>%
mutate(PIT_REST = as.vector(difftime(DATE, lag(DATE), units="days"))) %>%
ungroup() %>%
group_by(YEAR, PIT_ID, GAME_ID) %>%
mutate(PIT_REST = first(PIT_REST),
PIT_REST = pmin(PIT_REST, max_date_val)) %>%
ungroup() %>% group_by(YEAR, PIT_ID) %>%
mutate(PIT_REST = ifelse(DATE == min(DATE, na.rm=TRUE), max_date_val,  PIT_REST)) %>%
ungroup() %>% arrange(GAME_ID)
print("E3")
R = E3
write_csv(R, output_filename)
E0 <- E #%>% filter(YEAR %in% c(2015,2020))
### scrape WOBA WEIGHTS
content <- read_html("https://www.fangraphs.com/guts.aspx?type=cn")
tables <- content %>% html_table(fill = TRUE)
library(tidyverse)
library(rvest)
library(xml2)
input_filename = "retro_final_PA_1990-2020.csv"
output_filename = "retro_final_PA_1990-2020a.csv"
E <- read_csv(input_filename)
E0 <- E %>% select(-c(EVENT_CODE, PA_IND, AB_IND, WOBA_APP, EVENT_WOBA, WOBA_CUMU_BAT, WOBA_CUMU_PIT,
EVENT_RUNS, EVENT_ER_CT, EVENT_RBI_CT, EVENT_PITCH_COUNT, PITCH_COUNT_CUMU,
PITCH_COUNT_FINAL))
E0
### scrape WOBA WEIGHTS
content <- read_html("https://www.fangraphs.com/guts.aspx?type=cn")
tables <- content %>% html_table(fill = TRUE)
W <- tables[[9]]
W <- W %>% filter(Season == 2019) #FIXME
{
# EVENT_CODE === {IW, W, HP, NA}  --> [need for wOBA calculation]
E1 = E0 %>% mutate(EVENT_CODE =  ifelse(str_detect(EVENT_TX, "IW"), "IW",
ifelse(str_detect(EVENT_TX, "^W") & !str_detect(EVENT_TX, "^WP"), "W",
ifelse(str_detect(EVENT_TX, "HP"), "HP", "other" ))))
print("E1")
# PA_IND (plate appearance) (so, not a substitution or stolen base).
# Definition:   https://en.wikipedia.org/wiki/Plate_appearance
E2 <- E1 %>%  group_by(GAME_ID, BAT_HOME_IND) %>%
mutate(x = lead(BAT_ID) != BAT_ID,
x = replace_na(x, TRUE),
PA_IND_0 = x) %>% select(!c(x)) %>%
ungroup()
# 1. A batter is not credited with a plate appearance if, while batting, a preceding runner is put out on the basepaths for the
#    third out in a way other than by the batter putting the ball into play (i.e., picked off, caught stealing).
E2a <- E2 %>% group_by(GAME_ID, BAT_HOME_IND) %>% slice_tail() %>%
mutate(x = as.logical(str_count(EVENT_TX, "CS[23H]") - str_count(EVENT_TX, "CS[23H]\\([0-9]*E"))) %>% ungroup()
E2b <- left_join(E2, E2a) %>% mutate(x = replace_na(x, FALSE)) %>% mutate(PA_IND_1 = PA_IND_0 & !x) %>% select(!c(x))
# 2. A batter is not credited with a plate appearance if, while batting, the game ends as the winning run scores from third base on a
#    balk, stolen base, wild pitch, or passed ball.
E2c <- E2b %>% group_by(GAME_ID) %>% slice_tail() %>%
mutate(x = as.logical(str_detect(EVENT_TX, "^BK") | str_detect(EVENT_TX, "^SB") |
str_detect(EVENT_TX, "^WP") | str_detect(EVENT_TX, "^PB"))) %>%
ungroup()
E2d <- left_join(E2b, E2c) %>% mutate(x = replace_na(x, FALSE)) %>% mutate(PA_IND_2 = PA_IND_1 & !x) %>% select(!c(x))
#FIXME
#FIXME
# 3. A batter may or may not be credited with a plate appearance (and possibly at bat) in the rare instance when he is replaced by a
#    pinch hitter after having already started his turn at bat. Under Rule 9.15(b), the pinch hitter would receive the
#    plate appearance (and potential of an at-bat) unless the original batter  is replaced when having 2 strikes against him
#    and the pinch hitter subsequently completes the strikeout, in which case the plate appearance and at-bat are charged
#    to the first batter.
# Checks:
# View(E2d %>% filter(EVENT_TX == "NP"))
# View(E2d %>% filter(EVENT_TX == "NP") %>% select(EVENT_TX, PITCH_SEQ_TX, PA_IND_2))
# View(E2d %>% filter(EVENT_TX == "NP", PA_IND_2) %>%
#      select(GAME_ID, INNING, BAT_HOME_IND, BAT_NAME, PIT_NAME, PITCH_SEQ_TX, EVENT_TX, PA_IND_2))
# View(E2d %>% filter(GAME_ID == "TEX202009090", INNING==4) %>%
#        select(GAME_ID, INNING, BAT_HOME_IND, BAT_NAME, PIT_NAME, PITCH_SEQ_TX, EVENT_TX, PA_IND_2))
E2e <- E2d %>% mutate(PA_IND_3 = ifelse(EVENT_TX == "NP", FALSE, PA_IND_2))
E2_final <- E2e %>% mutate(PA_IND = PA_IND_3) %>% select(names(E1), PA_IND)
rm(E2); rm(E2a); rm(E2b); rm(E2c); rm(E2d); rm(E2e);
print("E2")
# AB_IND (at bat)
# AT-BAT is a PLATE-APPEARANCE without {SF,SH(sacBunt),W,IW,HP,C(catcher interference)}
# https://www.retrosheet.org/eventfile.htm
E3 <- E2_final %>% mutate(AB_IND = PA_IND & !(str_detect(EVENT_TX, "SF") & !str_detect(EVENT_TX, "\\/FL")) &
!(str_detect(EVENT_TX, "SH") & !str_detect(EVENT_TX, "\\/FL")) &
#!(str_detect(EVENT_TX, "^W") & !str_detect(EVENT_TX, "^WP")) &
!str_detect(EVENT_TX, "^W") &
!str_detect(EVENT_TX, "^IW") &
!str_detect(EVENT_TX, "^HP") & !str_detect(EVENT_TX, "^C"))
print("E3")
# WOBA_APP === TRUE iff it is a wOBA-appearance, i.e. in {AB,W,SF,HP}\{IW}
# SH (sacrifice hit/bunt) is not part of wOBA!
E4 <- E3 %>% mutate(WOBA_APP = (AB_IND | (str_detect(EVENT_TX, "^W") & !str_detect(EVENT_TX, "^WP")) |
(str_detect(EVENT_TX, "SF") & !str_detect(EVENT_TX, "\\/FL")) | #str_detect(EVENT_TX, "SF") |
str_detect(EVENT_TX, "^HP")) &
!str_detect(EVENT_TX, "^IW"))
# E4 <- E3 %>% mutate(WOBA_APP = PA_IND & !str_detect(EVENT_TX, "^IW") & !str_detect(EVENT_TX, "^C") &  !str_detect(EVENT_TX, "^INT") )
print("E4")
# EVENT_WOBA === wOBA of this event
# https://www.fangraphs.com/guts.aspx?type=cn
# HP, is an AB and PA.
# SH, SF, IW, W are PA but not AB
# an event is a WOBA_EVENT iff it is an {AB, W, SH, SF, HP} but not {IW}. Equivalently, {PA}\{IW}
# ---> include all plate appearances as wOBA except intentional walks !!!
E5 = E4 %>% mutate(EVENT_WOBA =
ifelse(WOBA_APP & HIT_VAL == 1, W$w1B, # single
ifelse(WOBA_APP & HIT_VAL == 2, W$w2B, # double
ifelse(WOBA_APP & HIT_VAL == 3, W$w3B, # triple
ifelse(WOBA_APP & HIT_VAL == 4, W$wHR, # HR
ifelse(WOBA_APP & EVENT_CODE == "W", W$wBB, # uBB / NIBB
ifelse(WOBA_APP & EVENT_CODE == "HP", W$wHBP, # HBP / HP
#ifelse(EVENT_CD==18, 0.92, # RBOE (reached base on error) --> no longer in the woba formula
#ifelse(PA_IND &  (EVENT_CODE != "IW"), 0, NA )))))))) %>% ungroup()
0)))))))
print("E5")
#View(E5 %>% filter(GAME_ID == "BOS202008180"))
# WOBA_CUMU_BAT (INDIVIDUAL BATTER'S QUALITY)
E6 <- E5 %>% group_by(YEAR, BAT_ID) %>%
mutate(cumu.woba.sum.b = cumsum(replace_na(EVENT_WOBA, 0)),
cumu.woba.denom.b = cumsum(replace_na(WOBA_APP, 0)),
WOBA_CUMU_BAT = cumu.woba.sum.b/cumu.woba.denom.b) %>%
ungroup()
print("E6")
# WOBA_CUMU_PIT (INDIVIDUAL PITCHER'S QUALITY)
E7 <- E6 %>% group_by(YEAR, PIT_ID) %>%
mutate(cumu.woba.sum.p = cumsum(replace_na(EVENT_WOBA, 0)),
cumu.woba.denom.p = cumsum(replace_na(WOBA_APP, 0)),
WOBA_CUMU_PIT = cumu.woba.sum.p/cumu.woba.denom.p) %>%
ungroup()
print("E7")
# EVENT_RUNS === number of runs recorded during this event
# EVENT_ER_CT === number of earned runs recorded during this event (take into accoount UR)
# EVENT_RBI_CT === number of RBIs recorded during this event (take into accoount NR)
E8 = E7 %>% mutate(run_tx = str_extract(EVENT_TX, "([^.]+$)"),
num.home = str_count(run_tx, "-H"),
no.rbi = str_count(run_tx, "NR"),
unearned.runs = str_count(run_tx, "UR"),
hr.ind = ifelse(HIT_VAL == 4, 1, 0),
EVENT_RUNS = num.home + hr.ind,
EVENT_ER_CT = EVENT_RUNS - unearned.runs,
EVENT_RBI_CT = EVENT_RUNS - no.rbi) %>%
select(!c(run_tx, num.home, no.rbi, unearned.runs, hr.ind))
print("E8")
#View(E8 %>% select(EVENT_TX, HIT_VAL, EVENT_RUNS, EVENT_ER_CT, EVENT_RBI_CT))
# EVENT_PITCH_COUNT== pitch count per event
# https://www.retrosheet.org/datause.txt    --> field 5
# pitches: C,S,B,F,X,T,H,L,M,P,K,U,Q,R   --> 14
# not a pitch: N,V,1,2,3,+,>,*,.,        --> 9
E9 = E8 %>% mutate(p = str_remove_all(PITCH_SEQ_TX, "[NV123\\+\\>\\*\\.]"),
EVENT_PITCH_COUNT = str_length(p)) %>%
select(!c(p))
print("E9")
# PITCH_COUNT_CUMU, PITCH_COUNT_FINAL
E10 <- E9 %>% group_by(GAME_ID, PIT_ID) %>%
mutate(PITCH_COUNT_CUMU = cumsum(replace_na(EVENT_PITCH_COUNT, 0)),
PITCH_COUNT_FINAL = sum(EVENT_PITCH_COUNT, na.rm=TRUE)) %>%
ungroup()
print("E10")
#View(E10 %>% select(INNING,BAT_HOME_IND,GAME_ID,BAT_NAME,HOME_TEAM_ID,AWAY_TEAM_ID,PIT_NAME,SP_IND,PITCH_SEQ_TX, EVENT_PITCH_COUNT, PITCH_COUNT_CUMU, PITCH_COUNT_FINAL))
}
R = E10
R_ = R %>% select(!c(cumu.woba.sum.b, cumu.woba.denom.b, cumu.woba.sum.p, cumu.woba.denom.p))
write_csv(R_, output_filename)
dim(R)
dim(E)
dim(R_)
R_
y=2019
w = W
R1 = R %>% group_by(BAT_ID) %>% filter(row_number() == n()) %>% filter(cumu.woba.denom.b >= 150) %>%
ungroup() %>% mutate(wOBA=round(WOBA_CUMU_BAT,3)) %>%
arrange(-WOBA_CUMU_BAT) %>% select(BAT_ID, BAT_NAME, YEAR, wOBA, cumu.woba.denom.b, WOBA_CUMU_BAT)
View(R1)
names(R_)
library(tidyverse)
input_filename = "retro_final_PA_1990-2020a.csv"
output_filename = "design_matrix_2015-2020a.csv"
D0 <- read_csv(input_filename)
setwd("~/Dropbox/Mac/Desktop/TTO_/rstan_0")
D0 <- read_csv(input_filename)
D0 <- D0 %>% filter(YEAR >= 2015) #FIXME
# only include starting pitchers and wOBA-appearances
D1 <- D0 %>% filter(SP_IND == 1, WOBA_APP == 1)
# select relevant columns, and view this
D2 <- D1 %>% select(GAME_ID, INNING, BAT_NAME, PIT_NAME,
EVENT_WOBA, WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH,
BAT_HOME_IND, PIT_REST, DAYS_SINCE_SZN_START,
IN_DIV, IN_LEAGUE, PITCH_COUNT_CUMU,
FIELD_POS, OUTS_CT,
#PARK, BATTER_SEQ_NUM)
ORDER_CT) %>%
mutate(across(HAND_MATCH, as.integer)) %>%
mutate(across(IN_DIV, as.integer)) %>%
mutate(across(IN_LEAGUE, as.integer))
# create BATTER_IDX
# BATTER_IDX === given the game and the team, assign the batters an integer {1,2,3,...} in order of appearance in the game
D3 <- D2 %>% group_by(GAME_ID, BAT_HOME_IND) %>%
mutate(BATTER_IDX = match(BAT_NAME, unique(BAT_NAME))) %>%
ungroup()
# `character` columns for the categorical variables
D4 <- D3 %>%  mutate(across(FIELD_POS, as.character)) %>%
mutate(across(OUTS_CT, as.character)) %>%
mutate(across(ORDER_CT, as.character)) %>%
mutate(across(BATTER_IDX, as.character))
# remove columns only meant for viewing
D5 <- D4 %>% select(-c(GAME_ID, INNING, BAT_NAME, PIT_NAME))
# design matrix!
X <- D5
write_csv(X, output_filename)
OUTPUT_FILE = "_07_2015-2020a_1"
NUM_ITERS_IN_CHAIN = 10 #1000 #10
library(tidyverse)
library(rstan)
cores = strtoi(Sys.getenv('OMP_NUM_THREADS')) ### for HPCC
cores
is.na(cores)
options(mc.cores = cores) ### for HPCC
# options(mc.cores = parallel::detectCores()) # use this on my computer
rstan_options(auto_write = TRUE)
# read data
input_file = "design_matrix_2015-2020a.csv" #"design_matrix_2020.csv"
D <- read_csv(input_file, col_types = "ddddddddddcccc")
D
head(D)
View(D)
names(D)
output_folder = "./job_output/"
D <- D %>% drop_na() #FIXME
# create dummy variables for the categorical variables
# NO INTERCEPT and INCLUDE FIRST COLUMN
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX + 0)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = BATTER_IDX1) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
# NO INTERCEPT and INCLUDE FIRST COLUMN
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT + 0)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
# response variable
y = D$EVENT_WOBA
X_c = D %>% select(WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH, BAT_HOME_IND,
PIT_REST, DAYS_SINCE_SZN_START, IN_DIV, IN_LEAGUE,
PITCH_COUNT_CUMU)
tto_dat <- list(n = length(y),
p_b = ncol(X_b),
p_o = ncol(X_o),
p_c = ncol(X_c),
X_b = X_b,
X_o = X_o,
X_c = X_c,
y = y)
# compile .stan file
file = 'tto7.stan'
model <- stan_model(file = file, model_name = "2019 woba coeffs, uniform priors for confounders")
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains=cores, cores=cores, ### for HPCC
#chains = 1,
seed = 12345)
ifelse(is.na(cores), 1, cores)
parallel::detectCores()
cores = 1
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains=cores, cores=cores, ### for HPCC
#chains = 1,
seed = 12345)
NAMES <- c("beta_b0", "beta_b1", colnames(X_b), colnames(X_o), colnames(X_c), "tau_b", "tau_o", "sigma")
P <- length(NAMES)
draws <- as_tibble(as.matrix(fit))
draws <- draws[,1:P]
names(draws) <- NAMES
#################
s <- summary(fit)
ss <- s$summary[1:P,]
rownames(ss) <- names(draws)
A0 = tibble(draws) %>% mutate(b11 = BATTER_IDX1 + ORDER_CT1,
b12 = BATTER_IDX2 + ORDER_CT1,
b13 = BATTER_IDX3 + ORDER_CT1,
b14 = BATTER_IDX4 + ORDER_CT1,
b15 = BATTER_IDX5 + ORDER_CT1,
b16 = BATTER_IDX6 + ORDER_CT1,
b17 = BATTER_IDX7 + ORDER_CT1,
b18 = BATTER_IDX8 + ORDER_CT1,
b19 = BATTER_IDX9 + ORDER_CT1,
b21 = BATTER_IDX1 + ORDER_CT2,
b22 = BATTER_IDX2 + ORDER_CT2,
b23 = BATTER_IDX3 + ORDER_CT2,
b24 = BATTER_IDX4 + ORDER_CT2,
b25 = BATTER_IDX5 + ORDER_CT2,
b26 = BATTER_IDX6 + ORDER_CT2,
b27 = BATTER_IDX7 + ORDER_CT2,
b28 = BATTER_IDX8 + ORDER_CT2,
b29 = BATTER_IDX9 + ORDER_CT2,
b31 = BATTER_IDX1 + ORDER_CT3,
b32 = BATTER_IDX2 + ORDER_CT3,
b33 = BATTER_IDX3 + ORDER_CT3,
b34 = BATTER_IDX4 + ORDER_CT3,
b35 = BATTER_IDX5 + ORDER_CT3,
b36 = BATTER_IDX6 + ORDER_CT3,
b37 = BATTER_IDX7 + ORDER_CT3,
b38 = BATTER_IDX8 + ORDER_CT3,
b39 = BATTER_IDX9 + ORDER_CT3) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
A1 = A0 +
mean(draws$WOBA_CUMU_BAT) * (.3) +
mean(draws$WOBA_CUMU_PIT) * (.3) +
mean(draws$HAND_MATCH) * 0 +
mean(draws$BAT_HOME_IND) * 1 +
mean(draws$PIT_REST) * 5 +
mean(draws$DAYS_SINCE_SZN_START) * 30 +
mean(draws$IN_DIV) * 1 +
mean(draws$IN_LEAGUE) * 1 +
mean(draws$PITCH_COUNT_CUMU) * 0
A2 = reshape2::melt(A1) ##FIXME
library(ggthemes)
theme_set(theme_classic())
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "time thru order number + batter index number",
title = "plot_05_2015-2020_1")
plot1
