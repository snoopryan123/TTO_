guest_profits <- c(NA, 20.74, -30.91, NA,NA,NA, -23.69, -50, -41)
guest_names <- c(NA,"Harrison", "Griffin", NA,NA,NA, "Kole", "Vaish", "Adil")
if (length(ryan) == length(nick)) {
N = length(ryan)
num_weeks <- 1:N
df<-data.frame(nick, ryan, num_weeks, guest_profits, guest_names)
ggplot(data = df)+
geom_point(aes(x= df$num_weeks, y = df$guest_profits, color = "guest")) +
geom_text(aes(x= df$num_weeks, y = df$guest_profits, label=guest_names, color = "guest"),hjust=0, vjust=0) +
geom_line(aes(x = df$num_weeks, y = df$nick, color = "nick")) +
geom_line(aes(x = df$num_weeks, y = df$ryan, color = "ryan")) +
geom_line(aes(x = df$num_weeks, y = rep(0, N), color = "zero")) +
scale_color_manual(values=c("goldenrod3", "firebrick", "dodgerblue2", "gray65")) +
labs(x = "Week Number", y = "Cumulative Profit", color="") +
scale_x_continuous(breaks = num_weeks)
}
nick <- c(35.83, 115.17, 103.78, 153.77, 173.33, 177.37, 174.54, 124.54, 74.54)
ryan <- c(-7.09, -9.49, -1.02, 36.22, 31.47, 5.33, 61.17, 53.19, 47.2)
#guest_profits <- c(20.74, -30.91, -23.69, -50, -41)
guest_profits <- c(NA, 20.74, -30.91, NA,NA,NA, -23.69, -50, -41)
guest_names <- c(NA,"Harrison", "Griffin", NA,NA,NA, "Kole", "Vaish", "Adil")
if (length(ryan) == length(nick)) {
N = length(ryan)
num_weeks <- 1:N
df<-data.frame(nick, ryan, num_weeks, guest_profits, guest_names)
ggplot(data = df)+
geom_point(aes(x= df$num_weeks, y = df$guest_profits, color = "guest")) +
geom_text(aes(x= df$num_weeks, y = df$guest_profits, label=guest_names, color = "guest"),hjust=0, vjust=0) +
geom_line(aes(x = df$num_weeks, y = df$nick, color = "nick")) +
geom_line(aes(x = df$num_weeks, y = df$ryan, color = "ryan")) +
geom_line(aes(x = df$num_weeks, y = rep(0, N), color = "zero")) +
scale_color_manual(values=c("orchid2", "firebrick", "dodgerblue2", "gray65")) +
labs(x = "Week Number", y = "Cumulative Profit", color="") +
scale_x_continuous(breaks = num_weeks)
}
nick <- c(35.83, 115.17, 103.78, 153.77, 173.33, 177.37, 174.54, 124.54, 74.54)
ryan <- c(-7.09, -9.49, -1.02, 36.22, 31.47, 5.33, 61.17, 53.19, 47.2)
#guest_profits <- c(20.74, -30.91, -23.69, -50, -41)
guest_profits <- c(NA, 20.74, -30.91, NA,NA,NA, -23.69, -50, -41)
guest_names <- c(NA,"Harrison", "Griffin", NA,NA,NA, "Kole", "Vaish", "Adil")
if (length(ryan) == length(nick)) {
N = length(ryan)
num_weeks <- 1:N
df<-data.frame(nick, ryan, num_weeks, guest_profits, guest_names)
ggplot(data = df)+
geom_point(aes(x= df$num_weeks, y = df$guest_profits, color = "guest")) +
geom_text(aes(x= df$num_weeks, y = df$guest_profits, label=guest_names, color = "guest"),hjust=0, vjust=0) +
geom_line(aes(x = df$num_weeks, y = df$nick, color = "nick")) +
geom_line(aes(x = df$num_weeks, y = df$ryan, color = "ryan")) +
geom_line(aes(x = df$num_weeks, y = rep(0, N), color = "zero")) +
scale_color_manual(values=c("orchid3", "firebrick", "dodgerblue2", "gray65")) +
labs(x = "Week Number", y = "Cumulative Profit", color="") +
scale_x_continuous(breaks = num_weeks)
}
nick <- c(35.83, 115.17, 103.78, 153.77, 173.33, 177.37, 174.54, 124.54, 74.54)
ryan <- c(-7.09, -9.49, -1.02, 36.22, 31.47, 5.33, 61.17, 53.19, 47.2)
#guest_profits <- c(20.74, -30.91, -23.69, -50, -41)
guest_profits <- c(NA, 20.74, -30.91, NA,NA,NA, -23.69, -50, -41)
guest_names <- c(NA,"Harrison", "Griffin", NA,NA,NA, "Kole", "Vaish", "Adil")
if (length(ryan) == length(nick)) {
N = length(ryan)
num_weeks <- 1:N
df<-data.frame(nick, ryan, num_weeks, guest_profits, guest_names)
ggplot(data = df)+
geom_point(aes(x= df$num_weeks, y = df$guest_profits, color = "guest")) +
geom_text(aes(x= df$num_weeks, y = df$guest_profits, label=guest_names, color = "guest"),hjust=0, vjust=0) +
geom_line(aes(x = df$num_weeks, y = df$nick, color = "nick")) +
geom_line(aes(x = df$num_weeks, y = df$ryan, color = "ryan")) +
geom_line(aes(x = df$num_weeks, y = rep(0, N), color = "zero")) +
scale_color_manual(values=c("darkmagenta", "firebrick", "dodgerblue2", "gray65")) +
labs(x = "Week Number", y = "Cumulative Profit", color="") +
scale_x_continuous(breaks = num_weeks)
}
nick <- c(35.83, 115.17, 103.78, 153.77, 173.33, 177.37, 174.54, 124.54, 74.54)
ryan <- c(-7.09, -9.49, -1.02, 36.22, 31.47, 5.33, 61.17, 53.19, 47.2)
#guest_profits <- c(20.74, -30.91, -23.69, -50, -41)
guest_profits <- c(NA, 20.74, -30.91, NA,NA,NA, -23.69, -50, -41)
guest_names <- c(NA,"Harrison", "Griffin", NA,NA,NA, "Kole", "Vaish", "Adil")
if (length(ryan) == length(nick)) {
N = length(ryan)
num_weeks <- 1:N
df<-data.frame(nick, ryan, num_weeks, guest_profits, guest_names)
ggplot(data = df)+
geom_point(aes(x= df$num_weeks, y = df$guest_profits, color = "guest")) +
geom_text(aes(x= df$num_weeks, y = df$guest_profits, label=guest_names, color = "guest"),hjust=0, vjust=0) +
geom_line(aes(x = df$num_weeks, y = df$nick, color = "nick")) +
geom_line(aes(x = df$num_weeks, y = df$ryan, color = "ryan")) +
geom_line(aes(x = df$num_weeks, y = rep(0, N), color = "zero")) +
scale_color_manual(values=c("darkmagenta", "firebrick", "dodgerblue2", "gray65")) +
labs(title = "Bet, Sweat, and Forget NFL Betting Results", x = "Week Number", y = "Cumulative Profit", color="") +
scale_x_continuous(breaks = num_weeks)
}
nick <- c(35.83, 115.17, 103.78, 153.77, 173.33, 177.37, 174.54, 124.54, 74.54)
ryan <- c(-7.09, -9.49, -1.02, 36.22, 31.47, 5.33, 61.17, 53.19, 47.2)
#guest_profits <- c(20.74, -30.91, -23.69, -50, -41)
guest_profits <- c(NA, 20.74, -30.91, NA,NA,NA, -23.69, -50, -41)
guest_names <- c(NA,"Harrison", "Griffin", NA,NA,NA, "Kole", "Vaish", "Adil")
if (length(ryan) == length(nick)) {
N = length(ryan)
num_weeks <- 1:N
df<-data.frame(nick, ryan, num_weeks, guest_profits, guest_names)
ggplot(data = df)+
geom_point(aes(x= df$num_weeks, y = df$guest_profits, color = "guest")) +
geom_text(aes(x= df$num_weeks, y = df$guest_profits, label=guest_names, color = "guest"),hjust=0, vjust=0) +
geom_line(aes(x = df$num_weeks, y = df$nick, color = "nick")) +
geom_line(aes(x = df$num_weeks, y = df$ryan, color = "ryan")) +
geom_line(aes(x = df$num_weeks, y = rep(0, N), color = "zero")) +
scale_color_manual(values=c("darkmagenta", "firebrick", "dodgerblue2", "gray65")) +
labs(title = "Bet, Sweat, and Forget 2020 NFL Betting Results", x = "Week Number", y = "Cumulative Profit", color="") +
scale_x_continuous(breaks = num_weeks)
}
nick <- c(35.83, 115.17, 103.78, 153.77, 173.33, 177.37, 174.54, 124.54, 74.54)
ryan <- c(-7.09, -9.49, -1.02, 36.22, 31.47, 5.33, 61.17, 53.19, 47.2)
#guest_profits <- c(20.74, -30.91, -23.69, -50, -41)
guest_profits <- c(NA, 20.74, -30.91, NA,NA,NA, -23.69, -50, -41)
guest_names <- c(NA,"Harrison", "Griffin", NA,NA,NA, "Kole", "Vaish", "Adil")
if (length(ryan) == length(nick)) {
N = length(ryan)
num_weeks <- 1:N
df<-data.frame(nick, ryan, num_weeks, guest_profits, guest_names)
ggplot(data = df)+
geom_point(aes(x= df$num_weeks, y = df$guest_profits, color = "guest")) +
geom_text(aes(x= df$num_weeks, y = df$guest_profits, label=guest_names, color = "guest"),hjust=0, vjust=0) +
geom_line(aes(x = df$num_weeks, y = df$nick, color = "nick")) +
geom_line(aes(x = df$num_weeks, y = df$ryan, color = "ryan")) +
geom_line(aes(x = df$num_weeks, y = rep(0, N), color = "zero")) +
scale_color_manual(values=c("darkmagenta", "firebrick", "dodgerblue2", "gray65")) +
labs(title = "Bet, Sweat, and Forget 2020 NFL Betting Results", x = "Week Number", y = "Cumulative Profit", color="") +
scale_x_continuous(breaks = num_weeks)
}
?ppoints
sigmasqr.grid <- ppoints(1000)*100
sigmasqr.grid
4^4
?sample
?rnorm
rnorm(c(3,4,5))
rnorm(c(1,1,1))
rnorm(c(1,2,1))
rnorm(1, sd = c(3,4,5))
rnorm(3, sd = c(3,4,5))
rnorm(3, sd = c(3,4,1000))
rnorm(3, sd = c(0,4,1000))
rnorm(3, mean = 5, sd = c(0,4,1000))
rnorm(4, mean = 5, sd = c(0,4,1000))
gridsampling.9A <- function(n, sample.mean, sample.sd) {
sample.sumofsquares = sample.sd^2 * (n-1)
sigmasqr.grid <- ppoints(1000)*100
sigmasqr.probs <- n^(-1/2) * sigmasqr.grid^(-(n+3)/2) * exp(-1/(2*sigmasqr.grid) * sample.sumofsquares)
sigmasqr.samples <- sample(sigmasqr.grid, size=1000, replace=TRUE, prob=sigmasqr.probs) # sigmasqr given y
mu.samples <- rnorm(1000, mean=sample.mean, sd=sqrt(sigmasqr.samples/n))  # mu given sigmasqr, y
}
mu.samples.c <- gridsampling.9A(32, 1.013, 0.24)
mu.samples.t <- gridsampling.9A(36, 1.173, 0.20)
control.hist.9A <- hist(mu.samples.c, main = paste("Histogram of Control Group Posterior Means"))
gridsampling.9A <- function(n, sample.mean, sample.sd) {
sample.sumofsquares = sample.sd^2 * (n-1)
sigmasqr.grid <- ppoints(1000)*100
sigmasqr.probs <- n^(-1/2) * sigmasqr.grid^(-(n+3)/2) * exp(-1/(2*sigmasqr.grid) * sample.sumofsquares)
sigmasqr.samples <- sample(sigmasqr.grid, size=1000, replace=TRUE, prob=sigmasqr.probs) # sigmasqr given y
mu.samples <- rnorm(1000, mean=sample.mean, sd=sqrt(sigmasqr.samples/n))  # mu given sigmasqr, y
}
mu.samples.c <- gridsampling.9A(32, 1.013, 0.24)
mu.samples.t <- gridsampling.9A(36, 1.173, 0.20)
control.hist.9A <- hist(mu.samples.c, main = paste("Histogram of Control Group Posterior Means"))
gridsampling.9A <- function(n, sample.mean, sample.sd) {
sample.sumofsquares = sample.sd^2 * (n-1)
sigmasqr.grid <- ppoints(1000)*100
sigmasqr.probs <- n^(-1/2) * sigmasqr.grid^(-(n+3)/2) * exp(-1/(2*sigmasqr.grid) * sample.sumofsquares)
sigmasqr.samples <- sample(sigmasqr.grid, size=1000, replace=TRUE, prob=sigmasqr.probs) # sigmasqr given y
mu.samples <- rnorm(1000, mean=sample.mean, sd=sqrt(sigmasqr.samples/n))  # mu given sigmasqr, y
}
mu.samples.c <- gridsampling.9A(32, 1.013, 0.24)
mu.samples.t <- gridsampling.9A(36, 1.173, 0.20)
control.hist.9A <- hist(mu.samples.c, main = paste("Histogram of Control Group Posterior Means"))
treated.hist.9A <- hist(mu.samples.t, main = paste("Histogram of Treatment Group Posterior Means"))
treated.hist.9A <- hist(mu.samples.t, main = paste("Histogram of Treatment Group Posterior Means"))
treated.hist.9A <- hist(mu.samples.t, main = paste("Histogram of Treatment Group Posterior Means"))
treated.hist.9A <- hist(mu.samples.t, main = paste("Histogram of Treatment Group Posterior Means"))
gridsampling.9A <- function(n, sample.mean, sample.sd) {
sample.sumofsquares = sample.sd^2 * (n-1)
sigmasqr.grid <- ppoints(1000)*100
sigmasqr.probs <- n^(-1/2) * sigmasqr.grid^(-(n+3)/2) * exp(-1/(2*sigmasqr.grid) * sample.sumofsquares)
sigmasqr.samples <- sample(sigmasqr.grid, size=1000, replace=TRUE, prob=sigmasqr.probs) # sigmasqr given y
mu.samples <- rnorm(1000, mean=sample.mean, sd=sqrt(sigmasqr.samples/n))  # mu given sigmasqr, y
}
mu.samples.c <- gridsampling.9A(32, 1.013, 0.24)
mu.samples.t <- gridsampling.9A(36, 1.173, 0.20)
control.hist.9A <- hist(mu.samples.c, main = paste("Histogram of Control Group Posterior Means"))
treated.hist.9A <- hist(mu.samples.t, main = paste("Histogram of Treatment Group Posterior Means"))
diff <- mu.samples.t - mu.samples.c
diff.hist <- hist(diff, main = paste("Histogram of the Difference Posterior Means"))
interval.95.diff = quantile(diff, c(.05,.95))
diff <- mu.samples.t - mu.samples.c
diff.hist <- hist(diff, main = paste("Histogram of the Difference Posterior Means"))
interval.95.diff = quantile(diff, c(.05,.95))
interval.95.diff
?dnorm
y.grid = ppoints(1000)*10-5
plor(dnorm(y.grid, mean=3/2, sd=sqrt(2)))
y.grid = ppoints(1000)*10-5
plot(dnorm(y.grid, mean=3/2, sd=sqrt(2)))
y.grid
minplot = min(marginal.density.values)
maxplot = max(marginal.density.values)
plot(theta,marginal.density.values,type="l",col=3,xlim=c(-5,5),ylim=c(minplot,maxplot),lwd=2,
xlab="y",ylab="p(y)",main="Marginal Density")
y.grid = ppoints(1000)*10-5
marginal.density.values = dnorm(y.grid, mean=3/2, sd=sqrt(2))
minplot = min(marginal.density.values)
maxplot = max(marginal.density.values)
plot(theta,marginal.density.values,type="l",col=3,xlim=c(-5,5),ylim=c(minplot,maxplot),lwd=2,
xlab="y",ylab="p(y)",main="Marginal Density")
y.grid = ppoints(1000)*10-5
marginal.density.values = dnorm(y.grid, mean=3/2, sd=sqrt(2))
minplot = min(marginal.density.values)
maxplot = max(marginal.density.values)
plot(y.grid, marginal.density.values,type="l",col=3,xlim=c(-5,5),ylim=c(minplot,maxplot),lwd=2,
xlab="y",ylab="p(y)",main="Marginal Density")
y.grid = ppoints(1000)*10-5
marginal.density.values = dnorm(y.grid, mean=3/2, sd=sqrt(2))
minplot = min(marginal.density.values)
maxplot = max(marginal.density.values)
plot(y.grid, marginal.density.values,type="l",col=3,xlim=c(-5,8),ylim=c(minplot,maxplot),lwd=2,
xlab="y",ylab="p(y)",main="Marginal Density")
y.grid = ppoints(1000)*13-6.5
marginal.density.values = dnorm(y.grid, mean=3/2, sd=sqrt(2))
minplot = min(marginal.density.values)
maxplot = max(marginal.density.values)
plot(y.grid, marginal.density.values,type="l",col=3,xlim=c(-5,8),ylim=c(minplot,maxplot),lwd=2,
xlab="y",ylab="p(y)",main="Marginal Density")
y.grid = ppoints(1000)*15-6.5
marginal.density.values = dnorm(y.grid, mean=3/2, sd=sqrt(2))
minplot = min(marginal.density.values)
maxplot = max(marginal.density.values)
plot(y.grid, marginal.density.values,type="l",col=3,xlim=c(-5,8),ylim=c(minplot,maxplot),lwd=2,
xlab="y",ylab="p(y)",main="Marginal Density")
### 6B: Grid Sampling
theta.samples = sample(theta, size=1000, replace=TRUE, prob=posterior.points)
hist(theta.samples,main="Posterior Dist. of Theta",xlab="theta",ylab="",yaxt="n",col=)
y <- c(43,44,45,46.5,47.5)
n <- length(y)
post.density.func.6A <- function(theta) {
result <- 1
for (y_i in y) {
result <- result * 1/(1 + (y_i - theta)^2)
}
return(result)
}
theta <- ppoints(1000)*100
posterior.points <- post.density.func.6A(theta)
minplot = min(posterior.points)
maxplot = max(posterior.points)
plot(theta,posterior.points,type="l",col=3,xlim=c(0,100),ylim=c(minplot,maxplot),lwd=2,
xlab="theta",ylab="p(theta|y)",main="Unnormalized Posterior Density")
theta.samples = sample(theta, size=1000, replace=TRUE, prob=posterior.points)
hist(theta.samples,main="Posterior Dist. of Theta",xlab="theta",ylab="",yaxt="n",col=)
theta.samples
min(theta.samples)
max()
max(theta.samples)
x = rcauchy(1, location = theta.samples, scale = 1)
length(x)
rcauchy(1, location = theta.samples, scale = 1)
length(theta.samples)
rcauchy(1000, location = theta.samples, scale = 1)
x = rcauchy(1000, location = theta.samples, scale = 1)
min(x)
max(x)
posterior.predictive.samples = rcauchy(1000, location = theta.samples, scale = 1)
hist(posterior.predictive.samples
,breaks=2000,yaxt="n",ylab="",main="Predictive Dist. of Future Observation", xlab="y")
install.packages("REBayes")
library(REBayes)
par(mfrow = c(1,3))
x <- seq(-5, 6, by = 0.05)
plot(x, 0.9 * dnorm(x,0) + 0.1 * dnorm(x,2), type = "l", + xlab = "x", ylab = expression(g(x)), main = "")
plot(x, 0.9 * dnorm(x,0) + 0.1 * dnorm(x,2), type = "l", xlab = "x", ylab = expression(g(x)), main = "")
?dnorm
plot(x, 0.9 * dnorm(x,0) + 0.1 * dnorm(x,2), type = "l", xlab = "x", ylab = expression(g(x)), main = "")
par(mfrow = c(1,3))
x <- seq(-5, 6, by = 0.05)
plot(x, 0.9 * dnorm(x,0) + 0.1 * dnorm(x,2), type = "l", xlab = "x", ylab = expression(g(x)), main = "")
y <- rep(c(0,2), times = c(900,100)) + rnorm(1000)
y
?rep
z <- GLmix(y)
install.packages("Rmosek")
z <- GLmix(y)
Rmosek::mosek_attachbuilder
library(Rmosek)
mosek_attachbuilder(what_mosek_bindir)
z <- GLmix(y)
?Rmosek::mosek_attachbuilder
install.rmosek
install.rmosek()
mosek_attachbuilder(what_mosek_bindir,
pos=2L, name="Rmosek:builder", warn.conflicts=TRUE)
library(Rmosek)
z <- GLmix(y)
library(Rmosek)
mosek_attachbuilder()
install.rmosek() #this installs a version of rmosek replacing the CRAN  one
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch", repos="http://download.mosek.com/R/8")
install.packages("Rmosek", type = "source", INSTALL_opts = "--no-multiarch", repos = "http://download.mosek.com/R/8")
# A simple Gaussian mixture model
par(mfrow = c(1,3))
x <- seq(-5, 6, by = 0.05)
plot(x, 0.9 * dnorm(x,0) + 0.1 * dnorm(x,2), type = "l", xlab = "x", ylab = expression(g(x)), main = "")
y <- rep(c(0,2), times = c(900,100)) + rnorm(1000)
z <- GLmix(y)
library(REBayes)
z <- GLmix(y)
library(REBayes)
library(Rmosek)
# A simple Gaussian mixture model
par(mfrow = c(1,3))
x <- seq(-5, 6, by = 0.05)
plot(x, 0.9 * dnorm(x,0) + 0.1 * dnorm(x,2), type = "l", xlab = "x", ylab = expression(g(x)), main = "")
y <- rep(c(0,2), times = c(900,100)) + rnorm(1000)
z <- GLmix(y)
plot(z, xlab = expression(mu), ylab = expression(f(mu)), main = "") R> plot(x, predict(z,x), type = "l", ylab = expression(delta(x)))
?mosek_attachbuilder
mosek_attachbuilder(NA)
library(Rmosek)
mosek_attachbuilder()
find.package('Rmosek')
mosek_attachbuilder("/Library/mosek")
mosek_attachbuilder("/Library/mosek/9.2/tools/platform/osx64x86/bin")
install.rmosek()
install.rmosek()
library(Rmosek)
example(mosek)
example(mosek)
library(Rmosek)
mosek_attachbuilder("~/mosek/9.2/tools/platform/osx64x86/bin") # this path will be different for your computer
install.rmosek()
library(Rmosek)
example(mosek)
library(REBayes)
library(Rmosek)
par(mfrow = c(1,3))
x <- seq(-5, 6, by = 0.05)
plot(x, 0.9 * dnorm(x,0) + 0.1 * dnorm(x,2), type = "l", xlab = "x", ylab = expression(g(x)), main = "")
y <- rep(c(0,2), times = c(900,100)) + rnorm(1000)
z <- GLmix(y)
plot(z, xlab = expression(mu), ylab = expression(f(mu)), main = "") R> plot(x, predict(z,x), type = "l", ylab = expression(delta(x)))
par(mfrow = c(1,3))
x <- seq(-5, 6, by = 0.05)
plot(x, 0.9 * dnorm(x,0) + 0.1 * dnorm(x,2), type = "l", xlab = "x", ylab = expression(g(x)), main = "")
y <- rep(c(0,2), times = c(900,100)) + rnorm(1000)
z <- GLmix(y)
plot(z, xlab = expression(mu), ylab = expression(f(mu)), main = "")
plot(x, predict(z,x), type = "l", ylab = expression(delta(x)))
rnorm(30,.5,.25)
OUTPUT_FILE = "_06_2015-2020_1"
NUM_ITERS_IN_CHAIN = 10 #1000 #10
library(tidyverse)
library(rstan)
options(mc.cores = strtoi(Sys.getenv('OMP_NUM_THREADS'))) # use this on HPCC
# options(mc.cores = parallel::detectCores()) # use this on my computer
rstan_options(auto_write = TRUE)
# read data
input_file = "design_matrix_2015-2020.csv" #"design_matrix_2020.csv"
D <- read_csv(input_file, col_types = "ddddddddddcccc")
setwd("~/Dropbox/Mac/Desktop/TTO_/rstan_0")
D <- read_csv(input_file, col_types = "ddddddddddcccc")
names(D)
output_folder = "./job_output/"
D <- D %>% drop_na() #FIXME
# create dummy variables for the categorical variables
# NO INTERCEPT and INCLUDE FIRST COLUMN
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX + 0)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = BATTER_IDX1) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
# NO INTERCEPT and INCLUDE FIRST COLUMN
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT + 0)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
# response variable
y = D$EVENT_WOBA
X_c = D %>% select(WOBA_CUMU_BAT, WOBA_CUMU_PIT, HAND_MATCH, BAT_HOME_IND,
PIT_REST, DAYS_SINCE_SZN_START, IN_DIV, IN_LEAGUE,
PITCH_COUNT_CUMU)
X_c
dim(X_c)
dim(X_b)
dim(X_o)
tto_dat <- list(n = length(y),
p_b = ncol(X_b),
p_o = ncol(X_o),
p_c = ncol(X_c),
X_b = X_b,
X_o = X_o,
X_c = X_c,
y = y)
# compile .stan file
file = 'tto6.stan'
model <- stan_model(file = file, model_name = "linear regression, ind. normal priors")
?sampling
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains = 1,
seed = 12345)
fit
NUM_ITERS_IN_CHAIN = 20 #1000 #10
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains = 1,
seed = 12345)
fit()
options(mc.cores = parallel::detectCores())
NUM_ITERS_IN_CHAIN = 10 #1000 #10
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains = 1,
seed = 12345)
fit
NAMES <- c("beta_b0", "beta_b1", colnames(X_b), colnames(X_o), "tau_b", "tau_o", "sigma")
P <- length(NAMES)
draws <- as_tibble(as.matrix(fit))
draws <- draws[,1:P]
names(draws) <- NAMES
#################
s <- summary(fit)
ss <- s$summary[1:P,]
rownames(ss) <- names(draws)
ss
fit
as.matrix(fit)
NAMES <- c("beta_b0", "beta_b1", colnames(X_b), colnames(X_o), colnames(X_c), "tau_b", "tau_o", "sigma")
P <- length(NAMES)
draws <- as_tibble(as.matrix(fit))
draws <- draws[,1:P]
names(draws) <- NAMES
#################
s <- summary(fit)
ss <- s$summary[1:P,]
rownames(ss) <- names(draws)
ss
fit
ss
A0 = tibble(draws) %>% mutate(b11 = BATTER_IDX1 + ORDER_CT1,
b12 = BATTER_IDX2 + ORDER_CT1,
b13 = BATTER_IDX3 + ORDER_CT1,
b14 = BATTER_IDX4 + ORDER_CT1,
b15 = BATTER_IDX5 + ORDER_CT1,
b16 = BATTER_IDX6 + ORDER_CT1,
b17 = BATTER_IDX7 + ORDER_CT1,
b18 = BATTER_IDX8 + ORDER_CT1,
b19 = BATTER_IDX9 + ORDER_CT1,
b21 = BATTER_IDX1 + ORDER_CT2,
b22 = BATTER_IDX2 + ORDER_CT2,
b23 = BATTER_IDX3 + ORDER_CT2,
b24 = BATTER_IDX4 + ORDER_CT2,
b25 = BATTER_IDX5 + ORDER_CT2,
b26 = BATTER_IDX6 + ORDER_CT2,
b27 = BATTER_IDX7 + ORDER_CT2,
b28 = BATTER_IDX8 + ORDER_CT2,
b29 = BATTER_IDX9 + ORDER_CT2,
b31 = BATTER_IDX1 + ORDER_CT3,
b32 = BATTER_IDX2 + ORDER_CT3,
b33 = BATTER_IDX3 + ORDER_CT3,
b34 = BATTER_IDX4 + ORDER_CT3,
b35 = BATTER_IDX5 + ORDER_CT3,
b36 = BATTER_IDX6 + ORDER_CT3,
b37 = BATTER_IDX7 + ORDER_CT3,
b38 = BATTER_IDX8 + ORDER_CT3,
b39 = BATTER_IDX9 + ORDER_CT3) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
A1 = A0 +
mean(draws$WOBA_CUMU_BAT) * (.3) +
mean(draws$WOBA_CUMU_PIT) * (.3) +
mean(draws$HAND_MATCH) * 0 +
mean(draws$BAT_HOME_IND) * 1 +
mean(draws$PIT_REST) * 5 +
mean(draws$DAYS_SINCE_SZN_START) * 30 +
mean(draws$IN_DIV) * 1 +
mean(draws$IN_LEAGUE) * 1 +
mean(draws$PITCH_COUNT_CUMU) * 0
A2 = reshape2::melt(A1) ##FIXME
library(ggthemes)
theme_set(theme_classic())
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "time thru order number + batter index number",
title = "plot_05_2015-2020_1")
plot1
fit
