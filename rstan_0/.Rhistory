print("E2")
# WOBA_AVG_PIT_19
# NUM_WOBA_APP_PIT
E3 <- E2 %>% group_by(YEAR, PIT_ID) %>%
mutate(cumu.woba.sum.p = cumsum(replace_na(EVENT_WOBA_19, 0)),
NUM_WOBA_APP_PIT = cumsum(replace_na(WOBA_APP, 0)),
WOBA_AVG_PIT_19 = cumu.woba.sum.p/NUM_WOBA_APP_PIT) %>%
ungroup()
print("E3")
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19) %>%
ungroup()
View(G4)
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19) %>%
ungroup() %>%
arrange(YEAR, BAT_ID)
histogram((G4%>%filter(YEAR==2019))$WOBA_AVG_BAT)
plot((G4%>%filter(YEAR==2019))$WOBA_AVG_BAT)
hist((G4%>%filter(YEAR==2019))$WOBA_AVG_BAT)
hist((G4%>%filter(YEAR==2019))$WOBA_AVG_BAT,bins=30)
hist((G4%>%filter(YEAR==2019))$WOBA_AVG_BAT,30)
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19, NUM_WOBA_APP_BAT) %>%
ungroup() %>%
arrange(YEAR, BAT_ID)
hist((G4%>%filter(YEAR==2019))$WOBA_AVG_BAT,30)
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19, NUM_WOBA_APP_BAT) %>%
rename(WOBA_FINAL_BAT = WOBA_AVG_BAT, WOBA_FINAL_BAT_19 = WOBA_AVG_BAT_19)
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19, NUM_WOBA_APP_BAT) %>%
rename(WOBA_FINAL_BAT = WOBA_AVG_BAT, WOBA_FINAL_BAT_19 = WOBA_AVG_BAT_19) %>%
ungroup() %>%
arrange(YEAR, BAT_ID)
E4 <- left_join(E3, G4, by=c(YEAR, BAT_ID, NUM_WOBA_APP_BAT))
names(E3)
names(G4)
E4 <- left_join(E3, G4, by=c(YEAR, BAT_ID, NUM_WOBA_APP_BAT))
E4 <- left_join(E3, G4, by=c(YEAR, BAT_ID, NUM_WOBA_APP_BAT))
G4
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19, NUM_WOBA_APP_BAT) %>%
rename(WOBA_FINAL_BAT = WOBA_AVG_BAT, WOBA_FINAL_BAT_19 = WOBA_AVG_BAT_19) %>%
ungroup() %>%
arrange(YEAR, BAT_ID)
E4 <- left_join(E3, G4, by=c(YEAR, BAT_ID, NUM_WOBA_APP_BAT))
E4 <- select(NUM_WOBA_APP_BAT) %>% left_join(E3, G4)
E4 <- select(-NUM_WOBA_APP_BAT) %>% left_join(E3, G4)
E4 <- E4 %>% select(-NUM_WOBA_APP_BAT) %>% left_join(G4)
E4 <- E3 %>% select(-NUM_WOBA_APP_BAT) %>% left_join(G4)
E5 <- E3 %>% left_join(G4, by = c(YEAR, BAT_ID, NUM_WOBA_APP_BAT))
E5 <- E3 %>% left_join(G4, by = c("YEAR", "BAT_ID", "NUM_WOBA_APP_BAT"))
head(E4)
head(E5)
E4 = E5
View(E4 %>% select(YEAR, BAT_NAME, WOBA_AVG_BAT_19, WOBA_FINAL_BAT_19))
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n())
View(G4)
# WOBA_AVG_BAT, WOBA_AVG_PIT
E0 <- E %>% rename(WOBA_AVG_BAT = WOBA_CUMU_BAT,
WOBA_AVG_PIT = WOBA_CUMU_PIT)
# EVENT_WOBA_19 === wOBA of this event, using 2019 wOBA weights
# https://www.fangraphs.com/guts.aspx?type=cn
# HP, is an AB and PA.
# SH, SF, IW, W are PA but not AB
# an event is a WOBA_EVENT iff it is an {AB, W, SH, SF, HP} but not {IW}. Equivalently, {PA}\{IW}
# ---> include all plate appearances as wOBA except intentional walks !!!
E1 = E0 %>% mutate(EVENT_WOBA_19 =
ifelse(WOBA_APP & HIT_VAL == 1, W$w1B, # single
ifelse(WOBA_APP & HIT_VAL == 2, W$w2B, # double
ifelse(WOBA_APP & HIT_VAL == 3, W$w3B, # triple
ifelse(WOBA_APP & HIT_VAL == 4, W$wHR, # HR
ifelse(WOBA_APP & EVENT_CODE == "W", W$wBB, # uBB / NIBB
ifelse(WOBA_APP & EVENT_CODE == "HP", W$wHBP, # HBP / HP
#ifelse(EVENT_CD==18, 0.92, # RBOE (reached base on error) --> no longer in the woba formula
#ifelse(PA_IND &  (EVENT_CODE != "IW"), 0, NA )))))))) %>% ungroup()
0)))))))
print("E1")
# WOBA_AVG_BAT_19
# NUM_WOBA_APP_BAT
E2 <- E1 %>% group_by(YEAR, BAT_ID) %>%
mutate(cumu.woba.sum.b = cumsum(replace_na(EVENT_WOBA_19, 0)),
NUM_WOBA_APP_BAT = cumsum(replace_na(WOBA_APP, 0)),
WOBA_AVG_BAT_19 = cumu.woba.sum.b/NUM_WOBA_APP_BAT) %>%
ungroup()
print("E2")
# WOBA_AVG_PIT_19
# NUM_WOBA_APP_PIT
E3 <- E2 %>% group_by(YEAR, PIT_ID) %>%
mutate(cumu.woba.sum.p = cumsum(replace_na(EVENT_WOBA_19, 0)),
NUM_WOBA_APP_PIT = cumsum(replace_na(WOBA_APP, 0)),
WOBA_AVG_PIT_19 = cumu.woba.sum.p/NUM_WOBA_APP_PIT) %>%
ungroup()
print("E3")
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n())
names(G4)
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19, NUM_WOBA_APP_BAT) %>%
rename(WOBA_FINAL_BAT = WOBA_AVG_BAT, WOBA_FINAL_BAT_19 = WOBA_AVG_BAT_19) %>%
ungroup() %>%
arrange(YEAR, BAT_ID)
E4 <- E3 %>% select(-c(NUM_WOBA_APP_BAT)) %>% left_join(G4)
View(E4 %>% select(YEAR, BAT_NAME, WOBA_AVG_BAT_19, WOBA_FINAL_BAT_19))
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19) %>%
rename(WOBA_FINAL_BAT = WOBA_AVG_BAT, WOBA_FINAL_BAT_19 = WOBA_AVG_BAT_19) %>%
ungroup() %>%
arrange(YEAR, BAT_ID)
E4 <- E3 %>% left_join(G4)
View(E4 %>% select(YEAR, BAT_NAME, WOBA_AVG_BAT_19, WOBA_FINAL_BAT_19))
# WOBA_FINAL_PIT, WOBA_FINAL_PIT_19
G5 <- E4 %>%
group_by(YEAR, PIT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, PIT_ID, WOBA_AVG_PIT, WOBA_AVG_PIT_19) %>%
rename(WOBA_FINAL_PIT = WOBA_AVG_PIT, WOBA_FINAL_PIT_19 = WOBA_AVG_PIT_19) %>%
ungroup() %>%
arrange(YEAR, PIT_ID)
E5 <- E4 %>% left_join(G5)
View(E5 %>% select(YEAR, PIT_NAME, WOBA_AVG_PIT_19, WOBA_FINAL_PIT_19))
# WOBA_FINAL_BAT, WOBA_FINAL_BAT_19, NUM_WOBA_APP_FINAL_BAT
G4 <- E3 %>%
group_by(YEAR, BAT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, BAT_ID, WOBA_AVG_BAT, WOBA_AVG_BAT_19, NUM_WOBA_APP_BAT) %>%
rename(WOBA_FINAL_BAT = WOBA_AVG_BAT,
WOBA_FINAL_BAT_19 = WOBA_AVG_BAT_19,
NUM_WOBA_APP_FINAL_BAT = NUM_WOBA_APP_BAT) %>%
ungroup() %>%
arrange(YEAR, BAT_ID)
E4 <- E3 %>% left_join(G4)
View(E4 %>% select(YEAR, BAT_NAME, WOBA_AVG_BAT_19, WOBA_FINAL_BAT_19, NUM_WOBA_APP_BAT, NUM_WOBA_APP_FINAL_BAT))
# WOBA_FINAL_PIT, WOBA_FINAL_PIT_19, NUM_WOBA_APP_FINAL_PIT
G5 <- E4 %>%
group_by(YEAR, PIT_ID) %>%
filter(row_number() == n()) %>%
select(YEAR, PIT_ID, WOBA_AVG_PIT, WOBA_AVG_PIT_19, NUM_WOBA_APP_PIT) %>%
rename(WOBA_FINAL_PIT = WOBA_AVG_PIT,
WOBA_FINAL_PIT_19 = WOBA_AVG_PIT_19,
NUM_WOBA_APP_FINAL_PIT = NUM_WOBA_APP_PIT) %>%
ungroup() %>%
arrange(YEAR, PIT_ID)
E5 <- E4 %>% left_join(G5)
View(E5 %>% select(YEAR, PIT_NAME, WOBA_AVG_PIT_19, WOBA_FINAL_PIT_19, NUM_WOBA_APP_PIT, NUM_WOBA_APP_FINAL_PIT))
R = E5
R_ = R %>% select(!c(cumu.woba.sum.b, cumu.woba.sum.p))
names(R_)
write_csv(R_, output_filename)
library(tidyverse)
input_filename = "retro_final_PA_1990-2020b.csv" #FIXME
output_filename = "design_matrix_2015-2020b.csv" #FIXME
D0 <- read_csv(input_filename)
D0 <- D0 %>% filter(YEAR >= 2015) #FIXME
setwd("~/Dropbox/Mac/Desktop/TTO_/rstan_0")
input_filename = "retro_final_PA_1990-2020b.csv" #FIXME
output_filename = "design_matrix_2015-2020b.csv" #FIXME
D0 <- read_csv(input_filename)
D0 <- D0 %>% filter(YEAR >= 2015) #FIXME
# only include starting pitchers and wOBA-appearances
D1 <- D0 %>% filter(SP_IND == 1, WOBA_APP == 1)
names(D1)
# select relevant columns, and view this
D2 <- D1 %>% select(GAME_ID, INNING, BAT_NAME, PIT_NAME,
EVENT_WOBA_19,
WOBA_AVG_BAT_19, WOBA_AVG_PIT_19,
WOBA_FINAL_BAT_19, WOBA_FINAL_PIT_19,
NUM_WOBA_APP_BAT, NUM_WOBA_APP_PIT,
NUM_WOBA_APP_FINAL_BAT, NUM_WOBA_APP_FINAL_PIT,
HAND_MATCH, BAT_HOME_IND, PIT_REST, DAYS_SINCE_SZN_START,
IN_DIV, IN_LEAGUE, PITCH_COUNT_CUMU,
FIELD_POS, OUTS_CT,
#PARK, BATTER_SEQ_NUM)
ORDER_CT) %>%
mutate(across(HAND_MATCH, as.integer)) %>%
mutate(across(IN_DIV, as.integer)) %>%
mutate(across(IN_LEAGUE, as.integer))
# create BATTER_IDX
# BATTER_IDX === given the game and the team, assign the batters an integer {1,2,3,...} in order of appearance in the game
D3 <- D2 %>% group_by(GAME_ID, BAT_HOME_IND) %>%
mutate(BATTER_IDX = match(BAT_NAME, unique(BAT_NAME))) %>%
ungroup()
# `character` columns for the categorical variables
D4 <- D3 %>%  mutate(across(FIELD_POS, as.character)) %>%
mutate(across(OUTS_CT, as.character)) %>%
mutate(across(ORDER_CT, as.character)) %>%
mutate(across(BATTER_IDX, as.character))
# remove columns only meant for viewing
D5 <- D4 %>% select(-c(GAME_ID, INNING, BAT_NAME, PIT_NAME))
# design matrix!
X <- D5
View(X)
View(D4)
write_csv(X, output_filename)
View(D4)
OUTPUT_FILE = "_08_2015-2020b"
NUM_ITERS_IN_CHAIN = 10 #1000 #10
library(tidyverse)
library(rstan)
cores=1
options(mc.cores = cores) ### for HPCC
# options(mc.cores = parallel::detectCores()) # use this on my computer
rstan_options(auto_write = TRUE)
# read data
input_file = "design_matrix_2015-2020b.csv"
D <- read_csv(input_file, col_types = "ddddddddddddcccc")
spec(D)
D <- read_csv(input_file, col_types = "ddddddddddddddddcccc")
spec(D)
spec(D)
output_folder = "./job_output/"
D <- D %>% drop_na() #FIXME
# create dummy variables for the categorical variables
# NO INTERCEPT and INCLUDE FIRST COLUMN
BATTER_IDX_dummies <- D %>% modelr::model_matrix(~ BATTER_IDX + 0)
BATTER_IDX_dummies <- BATTER_IDX_dummies %>%
relocate(BATTER_IDX2, .after = BATTER_IDX1) %>%
relocate(BATTER_IDX3, .after = BATTER_IDX2) %>%
relocate(BATTER_IDX4, .after = BATTER_IDX3) %>%
relocate(BATTER_IDX5, .after = BATTER_IDX4) %>%
relocate(BATTER_IDX6, .after = BATTER_IDX5) %>%
relocate(BATTER_IDX7, .after = BATTER_IDX6) %>%
relocate(BATTER_IDX8, .after = BATTER_IDX7) %>%
relocate(BATTER_IDX9, .after = BATTER_IDX8)
# NO INTERCEPT and INCLUDE FIRST COLUMN
ORDER_CT_dummies <- D %>% modelr::model_matrix(~ ORDER_CT + 0)
# design matrices
X_b = as.matrix(BATTER_IDX_dummies)
X_o = as.matrix(ORDER_CT_dummies)
# response variable
y = D$EVENT_WOBA_19
names(D)
# confounders
# DATA BLEED:
X_c = D %>% select(
#WOBA_AVG_BAT_19, WOBA_AVG_PIT_19,
WOBA_FINAL_BAT_19, WOBA_FINAL_PIT_19,
HAND_MATCH, BAT_HOME_IND)
X_c
tto_dat <- list(n = length(y),
p_b = ncol(X_b),
p_o = ncol(X_o),
p_c = ncol(X_c),
X_b = X_b,
X_o = X_o,
X_c = X_c,
y = y)
# compile .stan file
file = 'tto8.stan'
model <- stan_model(file = file, model_name = "")
model <- stan_model(file = file, model_name = "tto8")
model <- stan_model(file = file, model_name = "tto8")
model <- stan_model(file = file, model_name = "tto8")
model <- stan_model(file = file, model_name = "tto8")
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains=cores, cores=cores, ### for HPCC
#chains = 1,
seed = 12345)
model <- stan_model(file = file, model_name = "tto8")
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains=cores, cores=cores, ### for HPCC
#chains = 1,
seed = 12345)
model <- stan_model(file = file, model_name = "tto8")
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains=cores, cores=cores, ### for HPCC
#chains = 1,
seed = 12345)
NAMES <- c("beta_b0", "beta_b1",
colnames(X_b), colnames(X_o), colnames(X_c),
"tau_b", "tau_o", "sigma")
P <- length(NAMES)
draws <- as_tibble(as.matrix(fit))
draws <- draws[,1:P]
names(draws) <- NAMES
#################
s <- summary(fit)
ss <- s$summary[1:P,]
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains=cores, cores=cores, ### for HPCC
#chains = 1,
seed = 12345)
X_c
X_b
X_p
X_o
# compile .stan file
file = 'tto8.stan'
model <- stan_model(file = file, model_name = "tto8")
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains=cores, cores=cores, ### for HPCC
#chains = 1,
seed = 12345)
NAMES <- c("beta_b0", "beta_b1",
colnames(X_b), colnames(X_o), colnames(X_c),
"tau_b", "tau_o", "sigma")
P <- length(NAMES)
draws <- as_tibble(as.matrix(fit))
draws <- draws[,1:P]
names(draws) <- NAMES
#################
s <- summary(fit)
ss <- s$summary[1:P,]
rownames(ss) <- names(draws)
##ss
write.csv(data.frame(ss), file = paste0(output_folder, "fit_ss", OUTPUT_FILE, ".csv"),
row.names=TRUE)
A0 = m2 %>%   # tibble(draws) %>%
mutate(b11 = BATTER_IDX1 + ORDER_CT1,
b12 = BATTER_IDX2 + ORDER_CT1,
b13 = BATTER_IDX3 + ORDER_CT1,
b14 = BATTER_IDX4 + ORDER_CT1,
b15 = BATTER_IDX5 + ORDER_CT1,
b16 = BATTER_IDX6 + ORDER_CT1,
b17 = BATTER_IDX7 + ORDER_CT1,
b18 = BATTER_IDX8 + ORDER_CT1,
b19 = BATTER_IDX9 + ORDER_CT1,
b21 = BATTER_IDX1 + ORDER_CT2,
b22 = BATTER_IDX2 + ORDER_CT2,
b23 = BATTER_IDX3 + ORDER_CT2,
b24 = BATTER_IDX4 + ORDER_CT2,
b25 = BATTER_IDX5 + ORDER_CT2,
b26 = BATTER_IDX6 + ORDER_CT2,
b27 = BATTER_IDX7 + ORDER_CT2,
b28 = BATTER_IDX8 + ORDER_CT2,
b29 = BATTER_IDX9 + ORDER_CT2,
b31 = BATTER_IDX1 + ORDER_CT3,
b32 = BATTER_IDX2 + ORDER_CT3,
b33 = BATTER_IDX3 + ORDER_CT3,
b34 = BATTER_IDX4 + ORDER_CT3,
b35 = BATTER_IDX5 + ORDER_CT3,
b36 = BATTER_IDX6 + ORDER_CT3,
b37 = BATTER_IDX7 + ORDER_CT3,
b38 = BATTER_IDX8 + ORDER_CT3,
b39 = BATTER_IDX9 + ORDER_CT3) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
A0 = tibble(draws) %>%
mutate(b11 = BATTER_IDX1 + ORDER_CT1,
b12 = BATTER_IDX2 + ORDER_CT1,
b13 = BATTER_IDX3 + ORDER_CT1,
b14 = BATTER_IDX4 + ORDER_CT1,
b15 = BATTER_IDX5 + ORDER_CT1,
b16 = BATTER_IDX6 + ORDER_CT1,
b17 = BATTER_IDX7 + ORDER_CT1,
b18 = BATTER_IDX8 + ORDER_CT1,
b19 = BATTER_IDX9 + ORDER_CT1,
b21 = BATTER_IDX1 + ORDER_CT2,
b22 = BATTER_IDX2 + ORDER_CT2,
b23 = BATTER_IDX3 + ORDER_CT2,
b24 = BATTER_IDX4 + ORDER_CT2,
b25 = BATTER_IDX5 + ORDER_CT2,
b26 = BATTER_IDX6 + ORDER_CT2,
b27 = BATTER_IDX7 + ORDER_CT2,
b28 = BATTER_IDX8 + ORDER_CT2,
b29 = BATTER_IDX9 + ORDER_CT2,
b31 = BATTER_IDX1 + ORDER_CT3,
b32 = BATTER_IDX2 + ORDER_CT3,
b33 = BATTER_IDX3 + ORDER_CT3,
b34 = BATTER_IDX4 + ORDER_CT3,
b35 = BATTER_IDX5 + ORDER_CT3,
b36 = BATTER_IDX6 + ORDER_CT3,
b37 = BATTER_IDX7 + ORDER_CT3,
b38 = BATTER_IDX8 + ORDER_CT3,
b39 = BATTER_IDX9 + ORDER_CT3) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
A1 = A0 +
mean(draws$WOBA_CUMU_BAT) * (.3) +
mean(draws$WOBA_CUMU_PIT) * (.3) +
mean(draws$HAND_MATCH) * 0 +
mean(draws$BAT_HOME_IND) * 1 +
mean(draws$PIT_REST) * 5 +
mean(draws$DAYS_SINCE_SZN_START) * 30 +
mean(draws$IN_DIV) * 1 +
mean(draws$IN_LEAGUE) * 1 +
mean(draws$PITCH_COUNT_CUMU) * 0
A2 = reshape2::melt(A0) ##FIXME
library(ggthemes)
theme_set(theme_classic())
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "time thru order number + batter index number",
title = OUTPUT_FILE)
plot1
model <- stan_model(file = file, model_name = "tto8")
# obtain posterior samples of the parameters
fit <- sampling(model,
data = tto_dat,
include = FALSE,
pars = c("linpred_b", "linpred_o", "linpred_c"),
iter = NUM_ITERS_IN_CHAIN,
chains=cores, cores=cores, ### for HPCC
#chains = 1,
seed = 12345)
NAMES <- c("beta_b0", "beta_b1",
colnames(X_b), colnames(X_o), colnames(X_c),
"tau_b", "tau_o", "sigma")
P <- length(NAMES)
draws <- as_tibble(as.matrix(fit))
draws <- draws[,1:P]
names(draws) <- NAMES
#################
s <- summary(fit)
ss <- s$summary[1:P,]
rownames(ss) <- names(draws)
ss
A0 = tibble(draws) %>%
mutate(b11 = BATTER_IDX1 + ORDER_CT1,
b12 = BATTER_IDX2 + ORDER_CT1,
b13 = BATTER_IDX3 + ORDER_CT1,
b14 = BATTER_IDX4 + ORDER_CT1,
b15 = BATTER_IDX5 + ORDER_CT1,
b16 = BATTER_IDX6 + ORDER_CT1,
b17 = BATTER_IDX7 + ORDER_CT1,
b18 = BATTER_IDX8 + ORDER_CT1,
b19 = BATTER_IDX9 + ORDER_CT1,
b21 = BATTER_IDX1 + ORDER_CT2,
b22 = BATTER_IDX2 + ORDER_CT2,
b23 = BATTER_IDX3 + ORDER_CT2,
b24 = BATTER_IDX4 + ORDER_CT2,
b25 = BATTER_IDX5 + ORDER_CT2,
b26 = BATTER_IDX6 + ORDER_CT2,
b27 = BATTER_IDX7 + ORDER_CT2,
b28 = BATTER_IDX8 + ORDER_CT2,
b29 = BATTER_IDX9 + ORDER_CT2,
b31 = BATTER_IDX1 + ORDER_CT3,
b32 = BATTER_IDX2 + ORDER_CT3,
b33 = BATTER_IDX3 + ORDER_CT3,
b34 = BATTER_IDX4 + ORDER_CT3,
b35 = BATTER_IDX5 + ORDER_CT3,
b36 = BATTER_IDX6 + ORDER_CT3,
b37 = BATTER_IDX7 + ORDER_CT3,
b38 = BATTER_IDX8 + ORDER_CT3,
b39 = BATTER_IDX9 + ORDER_CT3) %>%
select(b11,b12,b13,b14,b15,b16,b17,b18,b19,b21,b22,b23,b24,b25,b26,b27,b28,b29,b31,b32,b33,b34,b35,b36,b37,b38,b39)
A1 = A0 +
mean(draws$WOBA_CUMU_BAT) * (.3) +
mean(draws$WOBA_CUMU_PIT) * (.3) +
mean(draws$HAND_MATCH) * 0 +
mean(draws$BAT_HOME_IND) * 1 +
mean(draws$PIT_REST) * 5 +
mean(draws$DAYS_SINCE_SZN_START) * 30 +
mean(draws$IN_DIV) * 1 +
mean(draws$IN_LEAGUE) * 1 +
mean(draws$PITCH_COUNT_CUMU) * 0
A2 = reshape2::melt(A0) ##FIXME
library(ggthemes)
theme_set(theme_classic())
plot1 = A2 %>% ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
labs(y="wOBA", x = "time thru order number + batter index number",
title = OUTPUT_FILE)
plot1
spec(D)
library(tidyverse)
library(rstan)
# read data
input_file = "design_matrix_2015-2020b.csv"
D <- read_csv(input_file, col_types = "ddddddddddddddddcccc")
spec(D)
